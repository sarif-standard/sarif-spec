# File format { #file-format }

## General { #fileFormat-General }

A SARIF log file shall contain the results of a one or more analysis runs.
The runs need not be produced by the same analysis tool.

A SARIF log file shall conform to the requirements of the JSON format.
The top-level value in the log file shall conform to the JSON object grammar;
that is, it shall consist of a comma-separated sequence of name/value pairs, enclosed in curly brackets,
as described in the JSON specification.
We refer to the object represented by this top-level value as the `sarifLog` object (&sect;[#sarifLog]).

Because SARIF conforms to the JSON format, all integer values shall be expressed in decimal notation.
Hexadecimal or octal notation shall not be used.

Every JSON property name defined by the SARIF format shall be a camelCase name.
Because the names of properties defined in property bags (&sect;[#property-bags]) such as `result.properties` (&sect;[#result-properties])
are not defined by the SARIF format, they are not subject to this requirement.
These property names should also be camelCase, but see [Annex C](#Annex-C) for exceptions.

~ IsoNote
A single run of an analysis tool that supports the SARIF format produces a SARIF log file
containing the results of that one run.
Other programs, such as build systems or result management systems, can consolidate the contents
of multiple single-run log files into a single SARIF log file that contains the results from all of those runs.
This allows the aggregated results to be conveniently stored in a file or transported over a network.
~

## URI-valued properties { #fileFormat-uriProperties }

Certain properties in this specification specify the URI of a file.
The value of every such property, if present, shall be a valid URI as described in RFC 3986.

If a URI refers to a file stored in a version control system (VCS),
the value shall preserve relevant details that permit the target file to be retrieved from the VCS.
If the URI refers to a file stored on a physical file system, it may be specified as a relative URI
that omits root information details
(such as hard drive letter and an arbitrarily named root directory associated with a source code enlistment).

~ IsoNumberedNote { @IsoNumberedNote=1 }
An absolute URI may contain information that represents unwanted information disclosure,
particularly in cases where a tool is analyzing files stored on a physical file system.
For example, a file path might contain the account name of a developer.
~

Two URIs shall be considered equivalent if their normalized forms are the same,
as described in RFC 3986.

~ IsoNumberedNote
For example, in the normalized form specified in RFC 3986:

* Percent-encoded characters use upper-case hexadecimal digits.
* Characters in the ALPHA and DIGIT ranges are not be percent-encoded,
nor are hyphen, underscore, or tilde.
* The ":" delimiter is omitted if the port component of the authority is empty.
* In the host component, registered names and hexadecimal addresses use lower-case.
~

Aside from normalization, tools that produce SARIF files shall not make any other
changes to the text of the URI; for example, they shall not convert the URI path to
upper case or to lower case.

~ IsoNumberedNote
This is especially important when the same SARIF file might be consumed on multiple platforms,
for example, a platform such as Windows, whose NTFS file system is case-insensitive but case-preserving,
and a platform such as Linux, whose file system is case-sensitive.
Consider a scenario where a tool runs on a Windows system using NTFS,
and the tool decides to lower-case the file names in the log.
If the source files and the SARIF log were transferred to a Linux system,
the URIs in the log file would not match the path names on the destination system. 
~

## URI base id properties { #fileFormat-uriBaseIdProperties }

Certain objects in this specification which have a URI-valued property (&sect;[#fileFormat-uriProperties])
also have a property that is described as being a "URI base id".
The value of such a property, if present, shall be a string which indirectly specifies the base URI for
the file whose location is specified in the corresponding URI-valued property by a relative URI.
If the URI-valued property contains an absolute URI, the URI base id property shall be absent.
If the URI-valued property is absent, the URI base id property shall be absent.

If the consumer of the log file requires an absolute URI (for example, to display
the specified file to a user), then the consumer must have the necessary information
to resolve the value of the URI base id property to an absolute URI, which can then be combined
with the relative URI stored in the URI-valued property.

The value of a URI base id property may be any string; it need not have any particular
syntax or follow any particular naming convention.
In particular, it need not designate a machine environment variable or similar value,
although it may.
The tool that produces the log file and any systems that consume the log file must agree on
the meanings of any values for the URI base id property that appear in the log file.


~ IsoNumberedExample { @IsoNumberedExample=1 }
In this example, the analysis tool has set the URI-valued property `result.resultFile.uri`
(&sect;[#physicalLocation-uri]) to the relative URI of the file in which the result was detected.
The tool has also set the value of the URI base id property `result.resultFile.uriBaseId`
(&sect;[#physicalLocation-uriBaseId]) to `"%srcroot%"`.
The analysis tool and the log file consumers have agreed upon a convention whereby
this indicates that the relative URI is expressed relative to the root of the source tree
in which the file appears.

```
"results": [
  {
    "resultFile": {
      "uri": "drivers/video/hidef/driver.c",
      "uriBaseId": "%srcroot%"
    }
  }
]
```
~

~ IsoNumberedExample
In this example, the analysis tool has set the URI-valued property `result.analysisTarget.uri`
(&sect;[#physicalLocation-uri]) to the relative URI of the file which the tool was instructed to scan.
The tool has also set the value of the URI base id property `result.analysisTarget.uriBaseId`
(&sect;[#physicalLocation-uriBaseId]) to `"$bindrop"`.
The analysis tool and the log file consumers have agreed upon a convention whereby
this indicates that the relative URI is expressed relative to the directory containing
the binary files produced by a build.

```
"results": [
  {
    "analysisTarget": {
      "uri": "hidef.dll",
      "uriBaseId": "$bindrop"
    }
  }
]
```
~

~ IsoNote
There are various reasons for providing URI base id properties:

1. Portability: A log file that contains relative URIs together with URI base id properties
can be interpreted on a machine where the files are located at a different absolute location.

2. Determinism: A log file that uses URI base id properties has a better chance of being
"deterministic"; that is, of being identical from run to run if none of its inputs have changed,
even if those runs occur on machines where the files are located at different absolute locations.

3. Security: The use of URI base id properties avoids the persistence of absolute path names
in the log file. Absolute path names can reveal information that might be sensitive.

4. Semantics: Assuming the reader of the log file (an end user or another tool) has the
necessary context, they can understand the meaning of the location specified by the `"uri"`
property, for example, "this is a source file".

5. Brevity: The URI base id property might be shorter than the absolute path it represents.
~

## String properties { #string-properties }

Unless otherwise specified in the description of a specific property,
all properties whose values are of type `"string"` must have a non-empty value.

## Object properties { #object-properties }

Certain properties in this specification are defined to be JSON objects whose property names
satisfy certain conditions.
Examples are the `run.files` property (&sect;[#run-files]) and the
`rule.messageFormats` property (&sect;[#rule-messageFormats]).
Unless otherwise specified in the description of a specific property,
if any such object is empty,
then the either property may be represented as an empty object `{}`,
or it may be absent.

## Array properties { #array-properties }

Certain properties in this specification are defined to be JSON arrays.
Examples are the `run.toolNotifications` property (&sect;[#run-toolNotifications]) and the
`file.hashes` property (&sect;[#file-hashes]).
Unless otherwise specified in the description of a specific property,
if any such array is empty,
then either the property may be represented as an empty array `[]`,
or it may be absent.

## Property bags { #property-bags }

### General { #property-bags-General }

Certain properties in this specification are defined to be "property bags".
A property bag is a JSON object containing an arbitrary set of properties.
The names of the properties should be camelCase strings, but see [Annex C](#Annex-C) for exceptions.
The values of the properties may be of any JSON type, including strings, numbers, arrays, and objects.
If the value of a property is a string, it may be the empty string.

### Tags { #property-bags-tags }

If a property bag contains a property with the name `tags`,
then the value of that property shall be an array containing zero or more arbitrary strings,
no two of which shall be the same.
Two strings shall be considered the same if they consist of the same
sequence of Unicode code points.

## Date/time properties { #fileFormat-dateTime }

Certain properties in this specification specify a date and time.
The value of every such property, if present, shall be a string in the following format,
which is compatible with [ISO-8601:2004](http://www.iso.org/iso/catalogue_detail?csnumber=40874):

```
<dateTime>: <date>T<time>Z

<date>:     YYYY-MM-DD

<time>:     hh:mm:ss[.sss]
```

Here `YYYY` is a 4-digit year,
`MM` is a 2-digit month from 01 to 12,
`DD` is a 2-digit day from 01 to 31,
`T` is a literal character "T" separating the date from the time,
`hh` is a 2-digit hours from 00 to 23,
`mm` is a 2-digit minutes from 00 to 59,
`ss` is a 2-digit seconds from 00 to 59,
`[.sss]` is an optional 3-digit number of milliseconds from 000 to 999, and
`Z` is a literal character "Z" specifying UTC time.

~ IsoExample

```
2016-02-08T16:08:25Z
2016-02-08T16:08:25.943Z
```
~

## Array properties with unique values { #unique-array-properties }

Certain properties in this specification whose values are JSON arrays are described as having
"unique" elements.
When a property is so described, it shall mean that no two elements of the array shall have equal values.
For purposes of this specification, two array elements are considered equal when they satisfy the
condition for equality described in _JSON Schema: core definitions and terminology_, &sect;3.6, "JSON value equality".

## Message properties { #message-properties }

Certain properties in this specification are string values containing messages intended
to be viewed by a user.
No such property shall have a value that is the empty string.

In addition, such properties should conform to the following guidelines:

The message should be expressed as a single paragraph of plain text,
consisting of one or more complete sentences, each ending with a period
(or appropriate punctuation for the language in which the message is written).
The message should not contain formatting information such as HTML tags.
The message should not contain JSON escaped line breaks (`\r` or `\n`).

If the message consists of more than one sentence, 
the first sentence of the message should provide a useful summary of the message,
suitable for display in cases where UI is limited.

~ IsoNumberedNote { @IsoNumberedNote=1 }
If a tool does not construct the message in this way, the initial portion of the message
that a viewer displays where UI space is limited might not be understandable.
~

~ IsoNumberedNote
The rationale for these guidelines is that the SARIF format is intended to make it feasible
to merge the outputs of multiple tools into a single user experience.
A uniform approach to message authoring enhances the quality of that experience.
~

## `sarifLog` object { #sarifLog }

### General { #sarifLog-General }

An `sarifLog` object specifies the version of the file format and contains the output from one or more runs.

~ IsoExample

```
{
    "version" : "0.1",  # see \(&sect;[#sarifLog-version]\)
    "runs" :            # see \(&sect;[#sarifLog-runs]\)
    [
        {
            ...         # a run object (see \(&sect;[#run]\))
        },
        ...
        {
            ...         # another run object
        }
    ]
}
```
~

### `version` property { #sarifLog-version }

A `sarifLog` object shall contain a property named `version` whose value is a string designating the
version of the SARIF format to which this log file conforms.
This string shall have the value `"1.0.0"`.

Although the order in which the name/value pairs appear in a JSON object value is not semantically significant,
the `version` property should appear first. 

~ IsoNote
This will make it easier for parsers to handle multiple versions of the SARIF format,
if new versions are defined in the future.
~

### `$schema` property { #sarifLog-dollarSchema }

A `sarifLog` object may contain a property named `$schema` whose value is a string containing a
URI from which a JSON schema describing the version of the SARIF format to which this log file conforms
can be obtained.

If the `$schema` property is present, the JSON schema obtained from the specified URI must describe
the version of the SARIF format specified by the `version` property (&sect;[#sarifLog-version]).

~ IsoNote
The purpose of the `$schema` property is to allow JSON schema validation tools to locate an
appropriate schema against which to validate the log file.
This is useful, for example, for tool authors who wish to ensure that logs produced by
their tools conform to the SARIF format.
~

### `runs` property { #sarifLog-runs }

An `sarifLog` object shall contain a property named `runs` whose value is an array
of one or more `run` objects (&sect;[#run]).

## `run` object { #run }

### General { #run-General }

A `run` object describes a single run of an analysis tool,
and contains the output of that run.

~ IsoExample

```
{
    "tool":        # see \(&sect;[#run-tool]\)
    {
        ...        # a tool object (see \(&sect;[#tool]\))
    },
    "results":     # see \(&sect;[#run-results]\)
    [
        {
            ...    # a result object (see \(&sect;[#result]\))
        },
        ...
        {
            ...    # another result object
        }
    ]
}
```
~

### `id` property { #run-id }

A `run` object may contain a property named `id` whose value is a string which uniquely identifies the run.

~ IsoNote
A result management system can use `id` to associate the information in the log with
additional information not provided by the analysis tool that produced it.
~

### `stableId` property { #run-stableId }

A `run` object may contain a property named `stableId` whose value is a string containing a stable identifier for the run.
Multiple runs of the same type may have the same `stableId`.

~ IsoExample

```
{
    "stableId": "Nightly security scanner run"
}
```
~

### `baselineId` property { #run-baselineId }

A `run` object may contain a property named `baselineId` whose value is a string which shall match
the `id` property (&sect;[#run-id]) of some previous run.

If the `baselineId` property is present, the `result.baselineState` property (&sect;[#result-baselineState]) of every `result` object (&sect;[#result])
in the current run shall be computed with respect to the run specified by `baselineId`.

If the `baselineId` property is absent, there must be out of band information available
to determine the run with respect to which `result.baselineState` has been computed.

### `automationId` property { #run-automationId }

A `run` object may contain a property named `automationId` whose value is a string containing
an identifier that allows the run to be correlated with other artifacts produced by a larger automation process.

~ IsoExample
In an environment where an analysis tool is executed as part of an
automated build process, the "build id" assigned by the build system might serve as the `automationId`,
allowing the tool run to be associated with other artifacts produced by the build.

```
{
  ...
  "runs": [
    {
      "automationId": "Build-14.0.1.2-20160518-15:48:02",
      ...
    }
  ]
}
```
~

### `architecture` property { #run-architecture }

A `run` object may contain a property named `architecture` whose value is a string that specifies the hardware
architecture at which the analysis targets are targeted.
This need not be the same as the architecture on which the analysis tool is executed.

This specification does not specify a set of valid values for the `architecture` property. 

~ IsoExample
An analysis tool running on a x86 architecture might be run once for a set of binaries
that target x86, and then again for another set of binaries that target AMD64.
The tool might set the `architecture` property for the first run to `"x86"`,
and for the second run to `"AMD64"`.
~

### `tool` property { #run-tool }

A `run` object shall contain a property named `tool` whose value is a `tool` object (&sect;[#tool])
that describes the analysis tool that was run.

### `invocation` property { #run-invocation }

A `run` object may contain a property named `invocation` whose value is an `invocation` object (&sect;[#invocation])
that describes the invocation of the analysis tool that was run.

### `files` property { #run-files }

A `run` object should contain a property named `files` whose value is a JSON object,
each of whose properties represents a file that was scanned in the course of the run.

The object specified by the `files` property should contain properties representing at least those files in which results were detected,
but it may contain properties representing all files examined by the tool (whether or not results were detected in those files),
or any subset of those files.

~ IsoNumberedNote { @IsoNumberedNote=1}
`file` objects contain information that is useful for viewers.
Viewers will be able to provide the most information to users if the `files`
property is present and contains information for every file in which results were detected.
~

~ IsoNumberedExample { @IsoNumberedExample=1 }

```
"files": {
    "file:///C:/Code/main.c": {
        "mimeType": "text/x-c",
        "hashes": [
            {
                "value": "b13ce2678a8807ba0765ab94a0ecd394f869bc81",
                "algorithm": "sha256"
            }
        ]
    }
}
```
~

Each property name in the `files` object shall be the URI of a file examined by the tool.
No two of these property names shall be equivalent as defined in &sect;[#fileFormat-uriProperties].
If the absolute location of the file is available, the URI should be an absolute URI;
otherwise, the URI shall be a relative URI.

Each property value in the `files` object shall be a `file` object (&sect;[#file])
which contains information about the file identified by the URI in the property name.

In some cases, a file might be nested within another file (for example, a compressed container),
referred to as its "parent."
A file that is not nested within another file is referred to as a "top-level file".
A file that is nested withing another file is referred to as a "nested file".

If the file is a nested file,
then the property name shall be the URI of the outermost parent,
together with a fragment that describes the nesting of the file within
its parent or parents.
The fragment shall be expressed as an absolute path;
that is, it shall begin with a forward slash character (`/`).

~ IsoNumberedExample
Valid: The fragment is expressed as an absolute path:

```
"files": {
    "file:///C:/bin/archive.zip#/images/grape.jpg": {
        ...
    }
}
```
~

~ IsoNumberedExample
Invalid: The fragment is not expressed as an absolute path:

```
"files": {
    "file:///C:/bin/archive.zip#images/grape.jpg": {
        ...
    }
}
```
~

If the file is nested more than one level deep in the outermost parent,
the fragments representing each level of nesting may be combined in any way desired,
as long as no two of the resulting property names are equivalent as defined in &sect;[#fileFormat-uriProperties].

~ IsoNumberedNote
It need not be possible to use this URI to navigate directly to the nested file.
The information necessary to do that is specified in the `uri` property (&sect;[#file-uri]),
or in the `offset` (&sect;[#file-offset]) and `length` (&sect;[#file-length]) properties,
of each `file` object.
~

~ IsoNumberedExample
Suppose a result is detected within a Flash object contained in a word processing document which is in turn contained
in a compressed archive.
Suppose the path to the word processing document within the compressed archive is `/docs/intro.docx`.
Then one possible value for the property name within the `files` object would be:

```
file:///C:/Code/presentation.zip#/docs/intro.docx/Flash1
```
~

If the fragment contains any characters which cannot occur in a fragment as specified in RFC 3986,
those character shall be percent-encoded as specified in RFC 3986.

~ IsoNumberedExample
Suppose a compressed container contains a file named `/docs/chapter#1.doc`.
Then one possible value for the property name within the `files` object would be:

```
file:///C:/Code/presentation.zip#/docs/chapter%231.doc
```
The `#` character has been percent-encoded as `%23`.
~

~ IsoNumberedExample
This example shows a `files` property that represents a file nested two levels deep in its
outermost container.
The first level of nesting is specified by a path within a compressed container.
The second level of nesting is specified by a byte offset from the start of the container,
together with a length. See &sect;[#file]. 

```
"files": {
    "file:///C:/Code/app.zip": {
        "mimeType": "application/zip",
    },
    "file:///C:/Code/app.zip#/docs/intro.docx": {
        "uri": "/docs/intro.docx",
        "mimeType": "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
        "parentKey": "file:///C:/Code/app.zip"    # \(See &sect;[#file-parentKey]\)
    },
    "file:///C:/Code/app.zip#/docs/intro.docx/Flash1": {
        "offset": 17522,
        "length": 4050,
        "mimeType": "application/x-shockwave-flash",
        "parentKey": "file:///C:/Code/app.zip#/docs/intro.docx"
    }
}
```
~

### `logicalLocations` property { #run-logicalLocations }

Depending on the circumstances, a `run` object either may or should contain a property named `logicalLocations` whose value is an object,
each of whose properties represents the logical location of one or more results detected in the course of the run.

If the tool has source location information available, and therefore can produce `result` objects with
physical location information (such as the source file name, line, and column), the `logicalLocations` property
may be present.

If the tool does not have source location information available, and therefore can only produce `result` objects
with logical location information (such as a namespace, type, and method name), the `logicalLocations` propertys
should be present.

With one exception described in &sect;[#location-logicalLocationKey], each property name in the `logicalLocations` object shall be
a string representing the logical location where the result was detected, in a format consistent with
the programming language in which the programmatic construct specified by that logical location was expressed.
We refer to this string as a "fully qualified logical name".
See &sect;[#location-fullyQualifiedLogicalName] for examples.

Each value in the object specified by the `logicalLocations` property shall be
a `logicalLocation` object (&sect;[#logicalLocation]).

In some cases, a logical location might be nested within another logical location
(for example, a class nested within a namespace), referred to as its "parent."
A logical location that is not nested within another logical location is referred to as a "top-level logical location".
A logical location that is nested withing another logical location is referred to as a "nested logical location".

If a result is detected in a nested logical location, then the `logicalLocations` object shall
contain properties describing not only that logical location, but also properties
describing each of its parents, up to and including the top-level logical location.

~ IsoExample
In this example, a result was detected in the C++ class `namespaceA::namespaceB::classC`. The `logicalLocations`
object contains not only a property describing the class, but also properties describing its parents.
```
"logicalLocations": {
    "namespaceA::namespaceB::classC": {
        "name": "classC",
        "kind": "type",
        "parentKey": "namespaceA::namespaceB"
    },
    "namespaceA::namespaceB": {
        "name": "namespaceB",
        "kind": "namespace"
        "parentKey": "namespaceA"
    },
    "namespaceA": {
        "name": "namespaceA",
        "kind": "namespace"
    }
}
```
~

~ IsoNote
The detailed information in `logicalLocations` is useful,
even though much of it is captured in the `location.fullyQualifiedLogicalName` property (&sect;[#location-fullyQualifiedLogicalName]),
because it allows results management systems and other programs to organize
analysis results, for example, by asking questions such as "How many results were
found in the class `namespaceA.namespaceB`?".
Programs can ask these questions without having to know how to parse the `fullyQualifiedLogicalName` string.
~

### `results` property { #run-results }

If the analysis tool was run with the intent of scanning files and producing results, then
the `run` object shall contain a property named `results` whose value is an array containing zero or more unique (&sect;[#unique-array-properties]) `result` objects (&sect;[#result]),
each of which represents a single result detected in the course of the run.

The `results` array shall be empty if the tool invocation that produced the `run` object did not detect any results.

If the tool was run solely for the purpose of exporting rule metadata (see &sect;[#run-rules]),
the `results` property shall be absent.

### `toolNotifications` { #run-toolNotifications }

A `run` object may contain a property named `toolNotifications`
whose value is an array of zero or more `notification` objects (&sect;[#notification]).
Each element of the array represents a runtime condition detected by the tool.
The presence within this array of any `notification` object whose `level` property (&sect;[#notification-level]) is `error` shall mean
that the run failed.

~ IsoNumberedNote { @IsoNumberedNote=1 }
The information in `toolNotifications` is primarily intended for the developers of the analysis tool,
to aid them in diagnosing bugs in the tool.
This is in contrast to the information in `results`, which is intended for the developers of the code being analyzed.
However, viewers may still present tool notifications to users, so users are aware of any tool problems.
At a minimum, viewers should make users aware of tool notifications whose `level` property is `error`.
~

~ IsoNumberedNote
Depending on the nature of the error, a tool that encounters a runtime error might or might not be able to continue running.

If the error occurs in the course of evaluating a rule, the tool might report the error in `toolNotifications`, disable the rule,
and continue to execute the remaining rules.

If the error occurs outside of the evaluation of a rule, the tool might report
the error in `toolNotifications` and then halt.
If the tool exits abnormally, it might not have the opportunity to report the error.
~

### `configurationNotifications` { #run-configurationNotifications }

A `run` object may contain a property named `configurationNotifications`
whose value is an array of zero or more `notification` objects (&sect;[#notification]).
Each element of the array represents a condition relevant to the tool's configuration.
The presence within this array of any `notification` object whose `level` property (&sect;[#notification-level]) is `error` shall mean
that the run failed.

~ IsoNumberedNote { @IsoNumberedNote=1 }
The information in `configurationNotifications` is primarily intended for the engineers who configure the analysis tool,
to aid them in diagnosing errors in the configuration.
This is in contrast to the information in `results`, which is intended for the developers of the code being analyzed.
However, viewers may still present configuration notifications to users, so users are aware of any configuration problems.
At a minimum, viewers should make users aware of configuration notifications whose `level` property is `error`.
~

~ IsoNumberedNote
Many tools can be parameterized with information about which rules to run, and how they should be configured.
In some cases, if the configuration information is invalid, the tool can ignore the invalid information
and continue to run.
~

~ IsoNumberedExample { @IsoNumberedExample=1 }
A tool is invoked with a configuration file which specifies that the tool should disable rule `ABC0001`,
but there is no rule whose `id` is `ABC0001`.
The tool should report the problem in `configurationNotifications`. The tool might
continue to run, reporting results for the rules that are correctly configured.
```
"configurationNotifications": [
    {
        "id": "UnknownRule",
        "ruleId": "ABC0001",
        "level": "warning",
        "message": "Could not disable rule \"ABC0001\" because there is no rule with that id." 
    }
]
```
~

~ IsoNumberedExample
A tool is invoked with an unknown command-line argument.
The tool should report the problem in `configurationNotifications`.
The tool might report the problem as a warning and continue to run,
or it might report the problem as an error and terminate.
```
"configurationNotifications": [
    {
        "id": "UnknownCommandLineArgument",
        "level": "error",
        "message": "Command line argument \"/X\" is unknown."
    }
]
```
~

~ IsoNumberedExample
A tool is invoked with a command-line argument that specifies the name of the log file,
but the user who invoked the tool does not have permission to create the file.
The tool should report the problem as an error in `configurationNotifications` and then terminate.
```
"configurationNotifications": [
    {
        "id": "CannotCreateLogFile",
        "level": "error",
        "message": "Cannot create log file \"C:/Windows/out.sarif\": Cannot write to directory \"C:/Windows\"."
    }
]
```
~

### `rules` property { #run-rules }

Depending on the circumstances, a `run` object (&sect;[#run]) either shall or may contain a property named `rules`
whose value is a JSON object, each of whose properties represents an analysis rule.
If the tool was run solely for the purpose of exporting rule metadata,
the `rules` property shall be present.
Otherwise, the `rules` property may be present.

Each property value in the `rules` object shall be a `rule` object (&sect;[#rule]).

If there is only one `rule` object with a particular `id` (&sect;[#rule-id]),
then the property name for that rule object shall be the rule id.

~ IsoNumberedExample { @IsoNumberedExample=1 }
In this example, two rules have different ids. The property names match the rule ids.

```
"rules": {
  "CA1001": {
    "id": "CA1001",
    "shortDescription": "Types that own disposable fields should be disposable."
  },
  "CA1002": {
    "id": "CA1002",
    "shortDescription": "Do not expose generic lists."
  }
}
```
~

Some tools use the same rule id to refer to multiple distinct (although logically related) rules.
In that case, the property names for those rule objects shall be distinct, even though the rule ids
are the same.
The property names should be clearly related to the rule id.

~ IsoNumberedExample
In this example, two distinct but related rules have the same rule id. The property names are
distinct, and are clearly related to the rule id.

```
"rules": {
  "CA1711-1": {
    "id": "CA1711",
    "messageFormats": {
      "default": "Rename type name {0} so that it does not end in '{1}'"
    }
  },
  "CA1711-2": {
    "id": "CA1711",
    "messageFormats": {
      "default": "Either replace the suffix '{0}' in member name '{1}' with the suggested numeric alternate or provide a more meaningful suffix"
    }
  }
}```
~

~ IsoNote
This property is a dictionary, rather than simply an array of `rule` objects,
to facilitate looking up the rule associated with each `result` object (&sect;[#result])
by means of the `result`'s `ruleId` property (&sect;[#result-ruleId]) or `ruleKey` property (&sect;[#result-ruleKey]).
~

### `properties` property { #run-properties }

A `run` object may contain a property named `properties` whose value is a property bag (&sect;[#property-bags]).
This allows tools to include information about the run that is not explicitly specified in the SARIF format.

## `tool` object { #tool }

### General { #tool-General }

A `tool` object contains information describing the analysis tool that was run.

~ IsoNote
If another tool post-processes the log file (for example, by removing certain results,
or by adding information that was not known to the analysis tool),
the post-processing tool should not alter any part of the `tool` object.
~

~ IsoExample

```
{
    "name": "CodeScanner",                                       # see \(&sect;[#tool-name]\)
    "fullName": "CodeScanner 1.1, Developer Preview (en-US)",    # see \(&sect;[#tool-fullName]\)
    "semanticVersion": "1.1.2-beta.12",                          # see \(&sect;[#tool-semanticVersion]\)
    "version": "1.1.2b12,                                        # see \(&sect;[#tool-version]\)
    "fileVersion": "1.1.1502.2"                                  # see \(&sect;[#tool-fileVersion]\)
}
```
~

### `name` property { #tool-name }

A `tool` object shall contain a property named `name` whose value is a string containing the name of the tool that produced the log file.

~ IsoExample
`"CodeScanner"`
~

### `fullName` property { #tool-fullName }

A `tool` object may contain a property named `fullName` whose value is a string containing the name of the tool
along with its version and any other useful identifying information, such as its locale.

~ IsoExample
`"CodeScanner 1.1, Developer Preview (en-US)"`
~

### `semanticVersion` property { #tool-semanticVersion }

In a log file produced by an analysis tool, a `tool` object shall contain a property named `semanticVersion`
whose value is a string containing the tool version in the format specified by Semantic Versioning 2.0.0 ("SemVer").

~ IsoNumberedExample { @IsoNumberedExample=1 }
`"1.1.2-beta.12"`
~

~ IsoNumberedNote { @IsoNumberedNote=1 }
Semantic versions have the property of being sortable in chronological order of release.
The presence of the `semanticVersion` property allows results management systems to (for example)
restrict the results they display to versions newer than a specified version,
or to restrict the results to a particular major version.
~

If the tool does not natively present its version string in SemVer format,
it shall synthesize a SemVer string to populate the `semanticVersion` property. 

~ IsoNumberedExample
Suppose an analysis tool natively presents its version string as `"2.0"`
(no "patch level" is available). The tool would synthesize a SemVer string `"2.0.0"`.
~

~ IsoNumberedExample
Suppose an analysis tool natively presents its version string as `"1.1.2b12"`
(the "pre-release" information is not in SemVer format).
The tool would synthesize a SemVer string `"1.1.2-beta.12"`.
~

In a log file produced by a conversion tool, the `semanticVersion` property shall be absent.

~ IsoNumberedNote
The rationale is that an analysis tool knows whether its version string is intended to be
interpreted according to SemVer.
A converter will in general not know this, even if the tool's version string conforms to the
pattern specified by SemVer.
~

### `version` property { #tool-version }

In a log file produced by an analysis tool, a `tool` object may contain a property named `version`
whose value is a string containing the tool version in whatever format the tool natively provides.

In a log file produced by a converter, the `version` property shall be present.

### `fileVersion` property { #tool-fileVersion }

If the operating system on which the tool runs provides a value for the file version of the tool's primary executable file,
then the `tool` object may contain a property named `fileVersion` whose value is
a string representation of that file version.
If the operating system does not provide such a value, the `fileVersion` property shall be absent.

~ IsoExample
On the Windows platform, this information is available in the `FILEVERSION` member of the `VERSIONINFO` structure.
~

### `language` property { #tool-language }

A tool object should contain a property named `language` whose value is a string
specifying the language of the messages produced by the tool, in the format specified by
RFC 3066.

~ IsoNumberedExample { @IsoNumberedExample=1 }
The tool language is English:
```
"tool": {
  "language": "en"
```
~

~ IsoNumberedExample
The tool language is French as spoken in France:
```
"tool": {
  "language": "fr-FR"
```
~

### `sarifLoggerVersion` property { #tool-sarifLoggerVersion }

If the tool that produced the log relied on another software component to generate the log,
then the `tool` object should contain a property named `sarifLoggerVersion` whose value is
a string specifying the version of the logging component.

~ IsoNote
This information is useful, for example, when a tool produces invalid output, and
the author of the tool wishes to file a bug report with the author of the logging
component.
In this case, it is helpful to the author of the logging component to know
the precise version number of the logging component that produced the invalid output.
~

### `properties` property { #tool-properties }

A `tool` object may contain a property named `properties` whose value is a property bag (&sect;[#property-bags]).
This allows tools to include information about the themselves that is not explicitly specified in the SARIF format.

## `invocation` object { #invocation }

### General { #invocation-General }

An `invocation` object contains information describing the invocation of the analysis tool that was run.

### `commandLine` property { #invocation-commandLine }

An `invocation` object may contain a property named `commandLine` whose value is a string
containing the completely specified command line used to invoke the tool,
starting with the name of the tool's executable or script file, optionally qualified by the relative or absolute path to the file.

~ IsoNumberedNote { @IsoNumberedNote=1 }
The information in the `commandLine` property makes it possible to precisely repeat a run of an analysis tool,
and to verify that the results reported in the log file were generated by an appropriate invocation of the tool.
~

If the information in `commandLine` contains information which should not be disclosed,
such as passwords, tokens, database connection strings, or in some circumstances even the fully qualified path to
the tool's executable or script file, that information should be redacted or omitted.
Redacted information should be replaced with the token `[REMOVED]`.

~ IsoNumberedNote
Redacting sensitive information from `commandLine` makes it more difficult to precisely reproduce
an analysis run. The value of `commandLine` would have to be combined with information from another
source to allow the run to be repeated.
~

~ IsoNumberedExample { @IsoNumberedExample=1 }
Suppose a tool is invoked with the command line

```
    C:\Users\johnsmith\Tools\DbScanner\DbScanner.exe
        /ConnectionString "Server=CorpServer;Database=Accounting;User Id=Admin;Password=S3cr#t" /input *.sql
```

Then the value of the `commandLine` property might contain the redacted command line

```
    [REMOVED]\DbScanner.exe /connectionString=[REMOVED] /input=*.sql 
```
~

The `commandLine` property might describe a command that would be harmful if it were executed.
For this reason, the recipient of a SARIF log file from an untrusted source should not execute the
command line without first examining it carefully.
In particular, an automated system should not execute a command line in a SARIF log file from an untrusted source.

~IsoNumberedExample
An example of a harmful command line:

```
"invocation": {
  "commandLine": "rm -rf /"
}
```
~


### `responseFiles` property { #invocation-responseFiles }

An `invocation` object may contain a property named `responseFiles` whose value is an object,
each of whose properties represents the contents of a response file specified on the tool's command line.

Each property name in the object shall be the URI of a response file specified on the tool's command line.
If the absolute location of the file is available, the URI should be an absolute URI;
otherwise, the URI shall be a relative URI.

Each property value in the object shall be a string containing the textual contents of the file specified by the property name.
If the file has zero length, the value shall be an empty string.
Characters that cannot appear directly in a JSON string shall be escaped as specified in the JSON specification.

~ IsoExample

```
"invocation": {
  "commandLine": "/quiet @analyzer.rsp @analyzer-strict.rsp",
  "responseFiles": {
    "analyzer.rsp": "/rules:basic\n/out:analyzer.sarif",
    "analyzer-strict.rsp": "/rules:security /rules:reliability",
    "analyzer-options.rsp": ""
  }
}
```
~

### `startTime` property { #invocation-startTime }

An `invocation` object may contain a property named `startTime` whose value is a string
specifying the date and time at which the run started.
The string shall be in the format specified by (&sect;[#fileFormat-dateTime]).

### `endTime` property { #invocation-endTime }

An `invocation` object may contain a property named `endTime` whose value is a string
specifying the date and time at which the run ended.
The string shall be in the format specified by (&sect;[#fileFormat-dateTime]).

### `machine` property { #invocation-machine }

An `invocation` object may contain a property named `machine` whose value is a string containing
the name of the machine on which the tool was run.

### `account` property { #invocation-account }

An `invocation` object may contain a property named `account` whose value is a string containing
the name of the account under which the tool was run.

### `processId` property { #invocation-processId }

An `invocation` object may contain a property named `processId` whose value is an integer containing
the id of the process in which the tool was run.

### `fileName` property { #invocation-fileName }

An `invocation` object may contain a property named `fileName` whose value is a string containing
the fully qualified path name of the tool's executable file.

~ IsoNumberedNote { @IsoNumberedNote=1 }
This property is defined in the `invocation` object rather than in the `tool` object (&sect;[#tool]) because the
identical tool might be invoked from different paths on different machines.
~

~ IsoNumberedNote
This property might duplicate information in the `commandLine` property (&sect;[#invocation-commandLine]).
It is necessary because the command line might not explicitly specify the path to the tool
(for example, if the tool directory is on the execution path), and this information is important
for troubleshooting.
~

~ IsoNumberedNote
Absolute path names can reveal information that might be sensitive.
~

### `workingDirectory` property { #invocation-workingDirectory }

An `invocation` object may contain a property named `workingDirectory` whose value is a string containing
the fully qualified path name of the directory in which the analysis tool was invoked.

~ IsoNote
Absolute path names can reveal information that might be sensitive.
~

### `environmentVariables` property { #invocation-environmentVariables }

An `invocation` object may contain a property named `environmentVariables` whose value is an object.
The property names in this object shall contain the names of all the environment variables in the tool's
execution environment. The value of each property shall be a string containing the value of the specified
environment variable.
If the value of the environment variable is an empty string,
the value of the corresponding property shall be an empty string.

~ IsoNumberedNote { @IsoNumberedNote=1 }
Environment variable names and values are likely to reveal highly sensitive information.
For example, on a Windows machine, environment variables reveal the directories
on the execution path, user account name, machine name, logon domain controller, _etc_.
~

~ IsoNumberedNote
The result of setting an environment variable to an empty string is operating system-dependent.
On Windows, it removes the variable from the environment.
In Unix, an environment variable can have an empty value.
~

### `properties` property { #invocation-properties }

An `invocation` object may contain a property named `properties` whose value is a property bag (&sect;[#property-bags]).
This allows tools to include information about the tool invocation that is not explicitly specified in the SARIF format.

## `file` object { #file }

### General { #file-General }

A `file` object represents a single file.

### `uri` property { #file-uri }

Depending on the circumstances, a `file` object either shall, may, or shall not contain a property named `uri`
whose value is a string containing a valid URI (&sect;[#fileFormat-uriProperties]).

If the `file` object represents a top-level file, then the `uri` property may be present.
If present, it shall be equal to the name of the property within `run.files` (&sect;[#run-files])
whose value is this `file` object.
If absent, it shall be interpreted as having that same value.

If the `file` object represents a nested file whose location
relative to its parent can be expressed only by means of a path,
then the `uri` property shall be present, and its value shall be a valid relative URI expressing that path.

If the `file` object represents a nested file whose location within its parent can be expressed only by a byte offset
from the start of the parent, and not by means of a path,
then the `uri` property shall be absent.

If the `file` object represents a nested file whose location within its parent can be expressed either by means of a path
or by means of a byte offset from the start of the parent, then either the `uri` property
or the `offset` property (&sect;[#file-offset]) or both shall be present; they shall not both be absent.
If the `uri` property is present, its value shall be a valid relative URI expressing the path of the nested file within the parent.

~ IsoNumberedExample { @IsoNumberedExample = 1 }
The `uri` property of the top-level file repeats the property name.
The `uri` property of the nested file specifies the relative URI of the nested file
with respect to its parent.
```
"files": {
    "http://www.example.com/a.zip": {
        "uri": "http://www.example.com/a.zip",
        "mimeType": "application/zip"
    },
    "http://www.example.com/a.zip#/src/file.c": {
        "uri": "/src/file.c",
        "mimeType": "x-c",
        "parentKey": "http://www.example.com/a.zip" # See \(&sect;[#file-parentKey]\)
    }
}
```
~

~ IsoNumberedExample
The `uri` property of the top-level file is omitted. It is interpreted as `"http://www.example.com/a.zip"`.
```
"files": {
    "http://www.example.com/a.zip": {
        "mimeType": "application/zip"
    },
    "http://www.example.com/a.zip#/src/file.c": {
        "uri": "/src/file.c",
        "mimeType": "x-c",
        "parentKey": "http://www.example.com/a.zip"
    }
}
```
~

The value of the `uri` property for a nested file need not match the value of the fragment
portion of the URI specified in the property name.
This allows multiple levels of nesting to be represented.

~ IsoNumberedExample
There are two levels of nesting.
The `uri` property of the most deeply nested file
does not match the fragment portion of the URI specified in the property name.
```
"files": {
    "http://www.example.com/a.zip": {
        "mimeType": "application/zip"
    },
    "http://www.example.com/a.zip#/media/b.zip": {
        "uri": "/media/b.zip",
        "mimeType": "application/zip",
        "parentKey": "http://www.example.com/a.zip"
    },
    "http://www.example.com/a.zip#/media/b.zip/images/c.png": {
        "uri": "/images/c.png",
        "mimeType": "image/png",
        "parentKey": "http://www.example.com/a.zip#/media/b.zip"
    }
}
```
~

### `uriBaseId` property { #file-uriBaseId }

If the `uri` property (&sect;[#file-uri]) is present and contains a relative URI,
then the `file` object may contain a property named `uriBaseId` whose value is
a string containing a URI base id (see &sect;[#fileFormat-uriBaseIdProperties]) which indirectly specifies
the absolute URI with respect to which `uri` shall be interpreted.

If the `uri` property is absent or contains an absolute URI, then the `uriBaseId` property
shall be absent.

### `parentKey` property { #file-parentKey }

If the file represented by the `file` object is a nested file,
then the `file` object shall contain a property named `parentKey` whose value is a string containing a URI
that matches the property name of the parent file's `file` object within `run.files` (&sect;[#run-files]).

If the file represented by the `file` object is a top-level file, then the `parentKey` property shall be absent.

~ IsoNote
The presence of the `parentKey` property makes it possible to navigate from the `file` object representing
a nested file to the `file` objects representing each of its parent files in turn, up to the top-level file.
It is necessary because the URI specified by a `file` object's property name within `run.files` does not
necessarily contain enough information to do so.
~

### `offset` property { #file-offset }

Depending on the circumstances, a `file` object either shall, may, or shall not contain a property named `offset`
whose value is a non-negative integer.

If the `file` object represents a top-level file, then the `offset` property shall be absent.

If the `file` object represents a nested file whose location
relative to its parent can be expressed only by means of a byte offset from the start of its parent file,
then the `offset` property shall be present, and its value shall be that byte offset.

If the `file` object represents a nested file whose location within its parent can only be expressed by means of a path,
and not by means of a byte offset from the start of the parent,
then the `offset` property shall be absent.

If the `file` object represents a nested file whose location within its parent can be expressed either by means of a path
or by means of a byte offset from the start of the parent, then either the `uri` property (&sect;[#file-uri])
or the `offset` property or both shall be present; they shall not both be absent.
If the `offset` property is present, its value shall be that byte offset.

### `length` property { #file-length }

A `file` object may contain a property named `length`
whose value is a non-negative integer specifying the length of the file in bytes.

### `mimeType` property { #file-mimeType }

A `file` object should contain a property named `mimeType` whose value is a string that specifies
the MIME type (RFC 2045) of the file.

### `hashes` property { #file-hashes }

A `file` object may contain a property named `hashes` whose value is an array of unique (&sect;[#unique-array-properties]) `hash` objects (&sect;[#hash]),
each of which specifies a hashed value for the file specified by the `file` object,
along with the name of the algorithm used to compute the hash.

If present, the array specified by `hashes` shall not be empty.

~ IsoNote
A hash value for an analysis target can be useful when a log file is processed by a result management system.
The value may be used as a key when persisting results in a database.
This allows a build system to use cached results, rather than repeating the analysis, when a target has not changed.
A file hash may also be useful for validating results in a policy compliance system,
allowing an auditor to validate that rerunning analysis against a target that hashes to a specific value reproduces the provided results.

The `file` object defines an array of hash values, rather than a single hash value,
to allow a log file to be consumed by multiple tool chains that might expect hash values produced by differing algorithms.
Compliance systems, for example, will favor the use of secure hash algorithms (such as SHA-256)
that minimize the possibility that two different targets will produce the same hash (at the expense of speed to produce the hash). 
In situations where compliance and security are not a concern, a system might prefer to use a fast hash algorithm (such as MD5 or SHA-1)
that occasionally produces hash collisions.

To populate the `hashes` property, an analysis tool must support the ability to produce hashes for its analysis targets.
Alternatively, the hashes could be added to the log file as a post-processing step.

To make the best use of such an analysis tool, a user (such as a build engineer) would determine what systems
in their build environment will consume the log file.
The user would then configure the tool to produce hashes using the algorithms required by those systems.
Analysis tools that are configurable to produce hashes with a variety of commonly used algorithms
will interoperate most easily with such systems.
~

### `contents` property { #file-contents }

A `file` object may contain a property named `contents` whose value shall be a string
representation of the contents of the file.

If the `file` object represents a binary file, the value of the `contents` string
shall be the MIME Base64 encoding of the bytes contained in the file.

If the `file` object represents a text file, the value of the `contents` string
shall be computed by first encoding the characters in the file to UTF-8,
and then encoding the resulting byte sequence with MIME Base64.

### `properties` property { #file-properties }

A `file` object may contain a property named `properties` whose value is a property bag (&sect;[#property-bags]).
This allows tools to include information about the file that is not explicitly specified in the SARIF format.

## `hash` object { #hash }

### General { #hash-General }

A `hash` object represents a hash value of some file or collection of files, together with the algorithm used to compute the hash.

~ IsoExample

```
{
    "value":"b13ce2678a8807ba0765ab94a0ecd394f869bc81",   # see \(&sect;[#hash-value]\)
    "algorithm":"sha256"                                  # see \(&sect;[#hash-algorithm]\)
}
```
~

### `value` property { #hash-value }

A `hash` object shall contain a property named `value` whose value is
a string representation of the hash value of some file or collection of files,
computed by the algorithm named in the `algorithm` property (&sect;[#hash-algorithm]).

~ IsoNote
The value is represented as a string because hash values are typically represented
in hexadecimal notation, and JSON integer values must be decimal.
~

### `algorithm` property { #hash-algorithm }

A `hash` object shall contain a property named `algorithm` whose value is a string specifying the name
of the algorithm used to compute the hash value specified in the `value` property (&sect;[#hash-value]).
This shall be one of the following:

*   `"authentihash"`
*   `"blake256"`
*   `"blake512"`
*   `"ecoh"`
*   `"fsb"`
*   `"gost"`
*   `"groestl"`
*   `"has160"`
*   `"haval"`
*   `"jh"`
*   `"md2"`
*   `"md4"`
*   `"md5"`
*   `"md6"`
*   `"radioGatun"`
*   `"ripeMD"`
*   `"ripeMD128"`
*   `"ripeMD160"`
*   `"ripeMD320"`
*   `"sdhash"`
*   `"sha1"`
*   `"sha224"`
*   `"sha256"`
*   `"sha384"`
*   `"sha512"`
*   `"sha3"`
*   `"skein"`
*   `"snefru"`
*   `"spectralHash"`
*   `"ssdeep"`
*   `"swifft"`
*   `"tiger"`
*   `"tlsh"`
*   `"whirlpool"`

## `result` object { #result }

### General { #result-General }

A `result` object describes a single result detected by an analysis tool.

### `ruleId` property { #result-ruleId }

Depending on the circumstances, a `rule` object either shall or shall not contain
a property named `ruleId` whose value is a string containing
the stable, opaque identifier for the rule that was evaluated to produce the result.

~ IsoExample
`"CA2101"`
~

If the log was created by an analysis tool (as opposed to a conversion tool),
then `ruleId` shall be present.

Not all existing analysis tools emit the equivalent of a `ruleId` in their output.
A conversion tool which converts the output of such an analysis tool to the SARIF format
shall not set the `ruleId` property, and in particular, it shall not attempt to
synthesize it from other information available in the original analysis tool's output.

### `ruleKey` property { #result-ruleKey }

If there is more than one rule with the id specified by the `ruleId` property (&sect;[#result-ruleId]),
and if the `run` object in which this result occurs contains a `rules` property (&sect;[#run-rules]),
then the `result` object shall contain a property named `ruleKey` whose value is a string that matches
one of the property names in the `run.rules` object.

The value of the `ruleId` property on this `result` object must match the
`id` property (&sect;[#rule-id]) of the `rule` object identified by `ruleKey`.

~ IsoExample
In this example, there is more than one rule with id `CA1711`. When the log includes a
result with that rule id, it provides a value for `ruleKey` to specify which of the rules with that `id` is meant.

```
`runs`: [
  {
    "results": [
      {
        "ruleId": "CA1711",  # Matches the "id" value of the specified property value within "rules"
        "ruleKey": "CA711-1" # Specifies a property name within "rules".
      }
    ],
    "rules": {
      "CA1711-1": {
        "id": "CA1711"
      },
      "CA1711-2": {
        "id": "CA1711"
      }
    }
  }
]
```
~

### `level` property { #result-level }

A `result` object may contain a property named `level` whose value is one of a fixed set of strings
that specify the severity level of the result.

If present, the `level` property shall have one of the following values, with the specified meanings:

* `"pass"`: The rule specified by the `ruleId` property (&sect;[#result-ruleId]) was evaluated, and no problem was found.

* `"warning"`: The rule specified by the `ruleId` property was evaluated, and a problem was found.

* `"error"`: The rule specified by the `ruleId` property was evaluated, and a serious problem was found.

* `"notApplicable"`: The rule specified by the `ruleId` property was not evaluated, because it does not apply to the
file specified by `analysisTarget` (&sect;[#location-analysisTarget]).

~ IsoNumberedExample { @IsoNumberedExample=1 }
In this example, a binary checker has a rule that applies to 32-bit binaries only.
It produces a `notApplicable` result if it is run on a 64-bit binary:
```
    "results": [
        {
            "ruleId": "ABC0001",
            "level": "notApplicable",
            "message": "\"MyTool64.exe\" was not evaluated for rule ABC0001 because it is not a 32-bit binary."
            "locations": [
                {
                    "analysisTarget": {
                        "uri": "file://C:/bin/MyTool64.exe"
                    }
                }
            ]
        }
    ]
```
~

* `"note"`: A purely informational log entry.

   The `ruleId` property for a `result` object whose `kind` property is `"note"` may be present, if the
   note relates to a particular rule; otherwise `ruleId` may be absent.

~ IsoNumberedExample
In this example, the tool reports an observation about the code that does not
represent a problem.
```
    "results": [
        {
            "ruleId": "ABC0002",
            "level": "note",
            "message": "Consider using 'nameof(start)' instead of hard-coding the parameter name 'start'."
            "locations": [
                {
                    "analysisTarget": {
                        "uri": "file:///C:/code/a.cs",
                        "region": {
                            "startLine": 6
                        }
                    }
                }
            ]
        }
    ]
```
~

~ IsoNumberedExample
In this example, the tool reports information that is relevant to a particular rule,
but does not represent an observation about the code.
```
    "results": [
        {
            "ruleId": "ABC0003",
            "level": "note",
            "message": "A new version of rule ABC0001 is available."
        }
    ]
```
~

~ IsoNumberedExample
In this example, the tool reports information that is not related to any particular rule,
and is not an observation about the code.
```
    "results": [
        {
            "level": "note",
            "message": "Version 11.0 of SuperLint is now available."
        }
    ]
```
~

If the `level` property is absent, its value shall be considered to be the value of the `defaultLevel` property (&sect;[#rule-defaultLevel])
of the `rule` object specified by this `result` object's `ruleId` property (&sect;[#result-ruleId]) or `ruleKey` property (&sect;[#result-ruleKey]).

In that case, if the `run` object (&sect;[#run]) containing this result does not include a `rules` property (&sect;[#run-rules]),
or if the `run.rules` property does not specify information for the rule associated with this `result`,
or if the `rule` object associated with this result does not specify a `defaultLevel` property,
then the value of the `level` property shall be considered to be `"warning"`.

### `message` property { #result-message }

A `result` object shall contain a property named `message` whose value is a string that describes the result.

The `message` property should conform to the guidelines for message properties (&sect;[#message-properties]).

The `message` property should provide sufficient details to allow an end user to resolve any problem that the result might indicate.
In particular, `message` shall include all of the following information that is available and relevant to the result:

*	Information sufficient to identify the analysis target, and the location within the target where the problem occurred.

*	The condition within the analysis target that led to the problem being reported.

*	The risks potentially associated with not fixing the problem.

*	The full range of responses to the problem that the end user could take
(including the definition of conditions where it might be appropriate not to fix the problem, or to conclude that the result is a false positive).

~ IsoExample
This is an example of a `message`:
```
    "Deleting member 'x' of variable 'y' may compromise performance on subsequent accesses
    of 'y'. Consider setting object member 'x' to null instead, unless this object is a dictionary
    or if runtime semantics otherwise dictate that the existence of a null member is distinct
    from one that is not present at all. This violation can also be ignored for infrequently
    called code paths."
```
~

### `formattedRuleMessage` property { #result-formattedRuleMessage }

A `result` object (&sect;[#result]) may contain a property named `formattedRuleMessage` whose value is
a `formattedMessage` object (&sect;[#formattedMessage]) that can be used to construct
a formatted message that describes the result.

If the `formattedRuleMessage` property is present on a `result`, the `message` property (&sect;[#result-message])
shall be absent.
If the `message` property is present on a `result`, the `formattedRuleMessage` property
shall be absent.

### `locations` property { #result-locations }

A `result` object should contain a property named `locations` whose value is an array
of one or more unique (&sect;[#unique-array-properties]) `location` objects (&sect;[#location]), each of which specifies a location where the result occurred.

~ IsoNote
In rare circumstances, it might not be possible to specify a location for a result.
However, `locations` is very valuable information for anyone who needs to diagnose and correct
the condition described by the result, so the authors of analysis tools should make
every effort to provide it.
~

~ IsoNumberedExample { @IsoNumberedExample=1}
If a C++ analyzer detects that no file defines a global function `main`,
then the result cannot be associated with a file.
~

The `locations` array shall not contain more than one element unless the condition indicated by the result, if any, can only be corrected
by making a change at every location specified in the array.

~ IsoNumberedExample
In programming languages that support partial classes,
the name of a single class may occur more than once in the source code.
If an analysis tool reported that the name of such a class did not conform to a specified convention,
then the resulting log file should contain a single result object,
which should contain a locations array each of whose elements specifies the location in the source code
where the class name occurs.
~

The `locations` array shall not be used to specify distinct occurrences of the same result,
which can be corrected independently.

~ IsoNumberedExample
Consider an analysis tool which locates misspelled words in documentation,
and suppose this tool scans a document in which the same word is misspelled in two distinct locations.
Then the resulting log file should contain two distinct `result` objects,
each of which should contain a `locations` array containing a single `location` object
specifying the location of one instance of the misspelled word.

In contrast, consider a tool which locates misspelled words in variable names.
If the tool detects a misspelled variable name, it should produce a single `result` object whose
`locations` array contains the location of every reference to the variable,
since fixing some but not all of the references would cause a compilation error.
~

### `snippet` property { #result-snippet }

A `result` object may contain a property named `snippet` whose value is a string containing
a source code or other file fragment that illustrates the result,
for example, the text of the source code line on which the result was detected,
or a small range of lines surrounding the result location.

### `toolFingerprintContribution` property { #result-toolFingerprintContribution }

A `result` object may contain a property named `toolFingerprintContribution` whose value is a string
that contributes to the unique identity of the result.
[Annex A](#Annex-A) explains how a result management system can use this value.

### `codeFlows` property { #result-codeFlows }

A `result` object may contain a property named `codeFlows` whose value is an array of one or more
unique (&sect;[#unique-array-properties]) `codeFlow` objects (&sect;[#codeFlow]).
The `codeFlows` property is intended for use by analysis tools that provide execution path
details that illustrate a possible problem in the code.
We refer to this execution path as a code flow.
Each `codeFlow` object in the `codeFlows` array shall describe a single code flow.

~ IsoNote
The SARIF file format allows multiple code flows within a single `result` object
to allow for the possibility that more than one path through the program might be
relevant to a single result.
~

### `stacks` property { #result-callStacks }

A `result` object may contain a property named `stacks` whose value is an array of one or more
unique (&sect;[#unique-array-properties]) `stack` objects (&sect;[#stack]).
The `stacks` property is intended for use by analysis tools that collects call stack information 
in the process of producing results.

~ IsoNote
The SARIF file format allows multiple call stacks within a single `result` object
to allow for the possibility that more than one call stack might be relevant to a single result.
~

### `relatedLocations` property { #result-relatedLocations }

A `result` object may contain a property named `relatedLocations` whose value is an array
of one or more unique (&sect;[#unique-array-properties]) `annotatedCodeLocation` objects (&sect;[#annotatedCodeLocation]),
each of which represents a location relevant to understanding the result.

~ IsoExample
Suppose that a tool for analyzing JavaScript has a rule that reports a problem
when a variable declared in an inner scope hides a variable with the same name in an enclosing scope.
The tool would report the problem on the line where the inner variable is declared.
The tool could choose to add an element to the `relatedLocations` array, specifying
the location where the outer variable was declared.

The result might appear in the log file like this:

```
results: [
    {
        "ruleId": "JS3056",
        "level": "error",
        "message": "Name 'index' cannot be used in this scope because it would give a different meaning to 'index'.",

        "locations": [
            {
                "analysisTarget": [
                    {
                        "uri": "file:///C:/Code/a.js",
                        "region": {
                            "startLine": "6",
                            "startColumn": "10"
                        }
                    }
                ]
            }
        ],

        "relatedLocations": [           # An array of annotatedCodeLocation objects (see \(&sect;[#annotatedCodeLocation]\))
            { 
                "message": "The previous declaration of 'index' was here.",
                "physicalLocation": {
                    "uri": "file:///C:/Code/a.js",
                    "region": {
                        "startLine": "2",
                        "startColumn": "6"
                    }
                }
            }
        ]
    },
    ...
]
```

The tool might write messages to the console like this:

```
C:\Code\a.js(6,10-10) : error : JS3056: Name 'index' cannot be used in this scope because it would give a different meaning to 'index'.
C:\Code\a.js(2,6-6) : info : JS3056: The previous declaration of 'index' was here.
```

~

### `suppressionStates` property { #result-suppressionStates }

#### General { #result-suppressionStates-General }

A `result` object may contain a property named `suppressionStates` whose value is an array of unique (&sect;[#unique-array-properties]) strings.
This property shall be present if and only if the analysis tool that produced the log file
wishes to convey the information that the condition described by the `result` object should
be "suppressed".

~ IsoNote
The treatment of "suppressed" results depends on the development environment within which the
log file is used, for example, a build system, an integrated development environment (IDE), or a result management system.
Typically, development environments do not expose suppressed results to the user.
For example, they do not include them in build log files, display them in error lists,
or include them in bug counts.
~

If present, this property conveys the reason or reasons that the result has been suppressed.
In this version of the SARIF standard, the only supported reasons for suppressing a result is that
the developer has suppressed it in the source code (see &sect;[#result-suppressionStates-suppressedInSource])
or that it is marked as suppressed in an external store such as a database (see &sect;[#result-suppressionStates-suppressedExternally]).

#### `suppressedInSource` value { #result-suppressionStates-suppressedInSource }

Some programming languages offer a syntactic construct for suppressing compiler warnings.

~ IsoExample
The `#pragma warning` construct in C# is such a syntactic construct.
~

For tools that examine source code written in such a language, the `suppressionStates` array shall include the value `"suppressedInSource"`
if the tool determines that the result occurred at a location within the scope of an instance of such a construct
which is intended to suppress that particular class of result.
If the tool determines that the result did not occur at such a location,
or if the tool cannot or chooses not to determine whether the result occurred at such a location,
or if the tool examines source code written in a language that lacks such a construct, the `suppressionStates` array
shall not include the value `"suppressedInSource"`.

#### `suppressedExternally` value { #result-suppressionStates-suppressedExternally }

Some development environments provide a persistent store, for example a database,
containing historical information about the results from static analysis tools.
Such a store might offer the ability to mark a result as "suppressed," meaning that
if the result is encountered again, it should be ignored.

When a tool with access to such a database detects such a result, it may choose not to add the result to the log.
If the tool does include such a result in the log, the `suppressionStates` array shall include the value 
`"suppressedExternally"`.

If the tool does not have access to a database of suppression information,
or if the tool does have access to such a database and determines that the result is not marked for suppression
in that database, then the `suppressionStates` array shall not include the value `"suppressedExternally"`.

### `baselineState` property { #result-baselineState }

A `result` object may contain a property named `baselineState` whose value is a string that specifies
the state of this `result` with respect to some previous run.

If the `run.baselineId` property (&sect;[#run-baselineId]) of the current run is present, the `baselineState` property
shall be computed with respect to the run specified by `run.baselineId`.

If the `run.baselineId` property of the current run is absent, then there must be out of band information
available to determine the run with respect to which the `baselineState` property has been computed.

This property shall have one of the following values, with the specified meanings:

* `"new"`: This result was detected in the current run but was not detected in the run specified by `run.baselineId`.

* `"existing"`: This result was detected both in the current run and in the run specified by `run.baselineId`.

* `"absent"`: This result was detected in the run specified by `run.baselineId` but was not detected in the current run.

If the `run.baselineId` property is present but the `baselineState` property is absent, the `baselineState` property
shall be considered to have the value `"new"`.

~ IsoNote
The purpose of the `baselineState` property is to allow (for example) a measurement of how many
new results were introduced in the run, and how many previously existing results no longer appear.

To assign a value to `baselineState`, a tool must have a way to determine whether a result is "the same", in some sense,
as a result that appeared in the run specified by `run.baselineId`.
[Annex A](#Annex-A) discusses how a result management system can assign a "fingerprint" to each result.
An analysis tool that works together with such a result management system can use the fingerprint to determine whether
two results are the same; two results with the same fingerprint are considered the same.
~

### `fixes` property { #result-fixes }

A `result` object may contain a property names `fixes` whose value is a JSON array of one or more unique (&sect;[#unique-array-properties]) `fix` objects (&sect;[#fix]).

### `properties` property { #result-properties }

A `result` object may contain a property named `properties` whose value is a property bag (&sect;[#property-bags]).
This allows tools to include information about the result that is not explicitly specified in the SARIF format.

## `location` object { #location }

### General { #location-General }

A `location` object specifies the location where an analysis tool detected a result.
Depending on the circumstances, a `location` object specifies the physical location (&sect;[#physicalLocation]) of the result,
the logical location (&sect;[#location-fullyQualifiedLogicalName]) of the result, or both.

A logical location specifies a programmatic construct, for example, a class name or a function name,
without specifying the programming artifact within which that construct occurs.

~ IsoNote
There are two reasons to include logical locations in the SARIF format in addition to physical locations:
    
1. In the absence of symbol information, binary analysis tools might not have source code locations available,
    so information about line and column numbers might not be present in the log file.
    In this case, code editors, other programs, or end users can use logical location to navigate from a result to the correct
    source code location.

2. Logical location information is an important contributor to fingerprinting scenarios,
    because it is typically more resilient to changes in source code than are line locations.
    See [Annex A](#Annex-A) for more information about fingerprinting.
    The `fullyQualifiedLogicalName` property (&sect;[#location-fullyQualifiedLogicalName])
    is particularly convenient for fingerprinting.
~

### Constraints { #location-Constraints }

Depending on the information available to the tool that produces the SARIF log file,
either or both of the `analysisTarget` property (&sect;[#location-analysisTarget]) and the
`resultFile` property (&sect;[#location-resultFile]) shall be present.

If the tool that produces the log file knows the analysis target, then the `analysisTarget`
property shall be present.
If the tool knows that the result file is different from the analysis target,
then the `resultFile` property shall be present;
otherwise the `resultFile` property shall be absent.

~ IsoNote
Generally, an analysis tool will know both the file it was instructed to scan
(the analysis target) and the file in which it detects a problem (the result file).
~

~ IsoNumberedExample { @IsoNumberedExample=1 }
Suppose an analysis tool for C++ source code is instructed to scan the source file _a.cpp_,
and suppose the tool detects a problem in _a.cpp_.
In this case, the tool should set the `analysisTarget` property to `a.cpp`,
and it should not set the `resultFile` property.
~

~ IsoNumberedExample
Suppose an analysis tool for C++ source code is instructed to scan the source file _a.cpp_,
which includes the header file _b.h_,
and suppose the tool detects a problem in _b.h_.
In this case, the tool should set the `analysisTarget` property to `a.cpp`,
and it should set the `resultFile` property to `b.h`.
~

~ IsoNumberedExample
Suppose an analysis tool for object code detects a problem in the binary file _c.dll_,
and suppose the tool has available symbol information which maps that location within the binary
to a specific line in a source file _d.cpp_.
In this case, the tool should set the `analysisTarget` property to `c.dll`,
and it should set the `resultFile` property to `d.cpp`.
~

If the tool that produces the log file does not know the analysis target,
then the `resultFile` property shall be present and the `analysisTarget` property shall be absent.

~ IsoNote
Some analysis tools produce output in a format that does not include both the
analysis target and the result file.
In such cases, a conversion tool which translates the output into the SARIF format
might only have the result file available. 
~

~ IsoNumberedExample
Suppose an analysis tool for C++ source code is instructed to scan the source file _a.cpp_,
which includes the header file _b.h_,
and suppose the tool detects a problem in _b.h_.
Suppose further that the tool produces output in a format other than SARIF, for example:

```
{ "file": "b.h", "line": 6, "column" 1, "Uninitialized variable" }
```

Suppose a conversion tool attempts to translate this output into SARIF format.
Suppose that the conversion tool does not know whether the analysis tool was instructed
to scan a source file that included _b.h_, or whether it was instructed to scan _b.h_ directly.
In this case, the conversion tool only knows that the problem occurred in _b.h_.
The conversion tool should set the `resultFile` property to `b.h`,
and it should not set the `analysisTarget` property. 
~

### `analysisTarget` property { #location-analysisTarget }

A `location` object may contain a property named `analysisTarget` whose value is a `physicalLocation` object (&sect;[#physicalLocation])
that identifies the file that the analysis tool was instructed to scan.
This need not be the same as the file where the result actually occurred. See `resultFile` (&sect;[#location-resultFile]) for more information on this point.

Whether `analysisTarget` is present depends on the information available to the tool that produces the log file
(see &sect;[#location-Constraints]).

### `resultFile` property { #location-resultFile }

A `location` object may contain a property named `resultFile` whose value is a `physicalLocation` object (&sect;[#physicalLocation])
that identifies the file where the analysis tool detected the result.

Whether `resultFile` is present depends on the information available to the tool that produces the log file
(see &sect;[#location-Constraints]).

### `fullyQualifiedLogicalName` property { #location-fullyQualifiedLogicalName }

Depending on the circumstances, a `location` object either should or may contain a property named `fullyQualifiedLogicalName` whose value is a string
which specifies the fully qualified name of the logical location where the analysis tool detected the result.
If physical location information is not available, `fullyQualifiedLogicalName` should be present.
Otherwise, `fullyQualifiedLogicalName` may be present.

The format of the `fullyQualifiedLogicalName` string shall be consistent with the programming language
in which the programmatic construct specified by that logical location was expressed.

~ IsoNumberedExample { @IsoNumberedExample=1 }
C: `create_process`
~
~ IsoNumberedExample
C++: `Namespace::Class::Method(int, double) const &&`
~
~ IsoNumberedExample
C#: `Namespace1.Namespace2.Class.Method(System.String, int[])`
~

If the `run.logicalLocations` property (&sect;[#run-logicalLocations]) is present,
the value of the `fullyQualifiedLogicalName` property should be equal to the name of one of the properties on the `run.logicalLocations` object,
with one exception, described in &sect;[#location-logicalLocationKey].

~ IsoNote
There are a few reasons the `fullyQualifiedLogicalName` property exists,
even though the information it contains is presented in more detail in the `run.logicalLocations` property.

1. It allows a result log viewer to display the logical location in a way that is easily understood by users.

2. As mentioned in &sect;[#location-General], `fullyQualifiedLogicalName` is also particularly convenient
for fingerprinting, although the more detailed information in `run.logicalLocations` could be used instead.

3. It relieves viewers from having to format the logical location from the more detailed
information in `run.logicalLocations`.

4. It is useful for producing readable in-source suppressions (for example, "suppress all instance of rule `CA2101`
    in the class `NamespaceA.NamespaceB.ClassC`").
~

### `logicalLocationKey` { #location-logicalLocationKey }

The `location` object may contain a property named `logicalLocationKey` whose value is a string.
If present, this string shall be equal to the name of one of the properties on the `run.logicalLocations` object (&sect;[#run-logicalLocations]),
which provides additional information about the logical location specified by `fullyQualifiedLogicalName` (&sect;[#location-fullyQualifiedLogicalName]).

`logicalLocationKey` is only necessary if, in the course of a run, the tool produces results in two or more
distinct logical locations with the same `fullyQualifiedLogicalName`.
In that case, the tool shall synthesize a unique name by appending a suffix to `fullyQualifiedLogicalName`,
assign the resulting string to `logicalLocationKey`, and use that string as the key into the `run.logicalLocations` dictionary.

~ IsoExample
Suppose a tool analyzes two C++ source files:

```
// file1.cpp
namespace A {
    class B {
    }
}

// file2.cpp
namespace A {
    namespace B {
        class C {
        }
    }
} 
```

(These could not coexist in the same compilation, but there is no reason two such source files could not exist.)

If the tool detected one result in class `B` in _file1.cpp_, and another result in namespace `B` in _file2.cpp_,
the `fullyQualifiedLogicalName` for both would be `A::B`.
In that case, the tool might set the `logicalLocationKey` property in either one of the results to `A::B-1`,
and it might populate the `logicalLocations` property as follows:

```
"logicalLocations": {
  "A::B": [
    {
      "name": "A",
      "kind": "namespace"
    },
    {
      "name": "B",
      "kind": "namespace"
    }
  ],
  "A::B-0": [
    {
      "name": "A",
      "kind": "namespace"
    },
    {
      "name": "B",
      "kind": "type"
    }
  ]
}
```
~

### `decoratedName` property { #location-decoratedName }

A `location` object may contain a property named `decoratedName` whose value is a string containing
the compiler's internal representation of the logical location associated with this `location` object.

Even though `decoratedName` describes a logical location,
the presence of `decoratedName` does not imply that `fullyQualifiedLogicalName` (&sect;[#location-fullyQualifiedLogicalName])
must be present.

~ IsoExample
In this example, the `decoratedName` property contains a "mangled" name emitted by a C++ compiler:

```
{ # A `location` object
  "fullyQualifiedLogicalName": "b::c(float)",
  "decoratedName": "?c@b@@AAGXM@Z"
}
```
~

### `properties` property { #location-properties }

A `location` object may contain a property named `properties` whose value is a property bag (&sect;[#property-bags]).
This allows tools to include information about the location that is not explicitly specified in the SARIF format.

## `physicalLocation` object { #physicalLocation }

### General { #physicalLocation-General }

A `physicalLocation` object represents the physical location where a result was detected.
A physical location specifies a reference to a programming artifact together with a region within that artifact.

### `uri` property { #physicalLocation-uri }

With certain exceptions, a `physicalLocation` object shall contain a property named `uri` whose value is a string that represents
the location of the file as a valid URI (&sect;[#fileFormat-uriProperties]).

The exceptions are as follows:

* Under certain circumstances, if the `physicalLocation` object appears as the value of an `annotatedCodeLocation.targetLocation` property (&sect;[#annotatedCodeLocation-target]),
the `uri` property may be absent, as described in &sect;[#annotatedCodeLocation-target].

* Under certain circumstances, if the `physicalLocation` object appears as a member of an `annotation.locations` array (&sect;[#annotation-locations])
which in turn appears as the value of an `annotatedCodeLocation.annotations` property (&sect;[#annotatedCodeLocation-annotations]),
the `uri` property may be absent, as described in &sect;[#annotatedCodeLocation-annotations].

If the `run.files` property (&sect;[#run-files]) is present, the value of the `uri` property should be equal to
the name of one of the properties on the `run.files` object,
which provides additional information about the file specified by `uri`.

~ IsoExample

```
{
  "version": "1.0",
  "runs": [
    {
      "run": {
        "files": {
          "file:///C:/Code/main.c": [
            {
              "mimeType": "text/x-c",
            }
          ]
        }
      },
      
      "results": [
        {
          "ruleId": "CA2101",
          "level": "error",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/Code/main.c",
                "region: {
                  "startLine": 24,
                  "startColumn": 9
                }
              }
            }
          ]
        }
      ]
    }
  ]
}
```
~

### `uriBaseId` property { #physicalLocation-uriBaseId }

If the `uri` property (&sect;[#physicalLocation-uri]) is present and contains a relative URI,
then the `physicalLocation` object may contain a property named `uriBaseId` whose value is
a string containing a URI base id (see &sect;[#fileFormat-uriBaseIdProperties]) which indirectly specifies
the absolute URI with respect to which `uri` shall be interpreted.

If the `uri` property is absent or contains an absolute URI, then the `uriBaseId` property
shall be absent.

### `region` property { #physicalLocation-region }

A `physicalLocation` object may contain a property named `region` whose value is a `region` object (&sect;[#region])
that represents the region within a file where the result was detected.

If the result occurs in a nested file, then the `region` property shall specify the location of the result
with respect to the innermost nested file.

~ IsoExample
If a result occurs in a C++ file contained in a compressed archive, then the region would represent
the line and column number of the result with the C++ file.
It would not represent (for example) the offset of the C++ file from the start of the archive.
~

## `region` object { #region }

### General { #region-General }

A `region` object represents a region, that is, a contiguous portion of a file.
Every property in a `region` object shall be represented by a non-negative integer,
that is, by a JSON number value with no sign, no fractional part, and no exponent part.

SARIF defines two types of regions: text regions and binary regions.

* A text region represents a contiguous range of of zero or more characters.
* A binary region represents a contiguous range of zero or more bytes.

SARIF defines different properties to represent text regions and binary regions.

In a text region, the `startLine` property (&sect;[#region-startLine])
shall be present and have a value greater than 0.
In a binary region, the `startLine` property shall be absent. 

~ IsoNumberedNote { @IsoNumberedNote=1 }
Consumers of SARIF files can use the presence or absence of the `startLine` property to
determine whether to treat a region as a text region or as a binary region.
~

~ IsoNumberedNote
It is up to each analysis tool whether to treat a given file as a text file
(in which case it would emit text regions for results detected in the file)
or as a binary file
(in which case it would emit binary regions).
~

### Text regions { #region-textFiles }

The line number of the first line in a text file shall have the value `1`.
The column number of the first character in each line shall have the value `1`.

~ IsoNote
SARIF defines column number as a count of characters.
If a line in a text file contains tab characters, viewers may choose to present column
numbers that match the visual offset of each character from the beginning of the line.
These "visual" column numbers will not match the column numbers contained in the SARIF file.
~

Depending on the file's character encoding, each character might be represented by one byte or by multiple bytes.
In source files encoded in UTF-16, characters outside the Basic Multilingual Plane (BMP)
are represented as a sequence of two 16-bit code points;
this sequence is called a "surrogate pair."
Tools that report results in UTF-16-encoded files shall consider characters outside the BMP
as occupying two columns.

~ IsoNumberedNote { @IsoNumberedNote=1 }
The reason for this requirement is that is common for existing tools to ignore surrogate pairs
when calculating column numbers.
~

Programs such as viewers that process SARIF log files together with the analysis target files
to which those log files refer should attempt to determine the character encoding of the target files.
In the absence of internal information such as a Byte Order Mark, viewers may use external information
(for example, command line arguments, project settings, or other configuration information)
to determine the character encoding.
If external information is also lacking, viewers should assume that each character occupies one byte.

The start of a text region shall be represented by a combination of the `startLine` (&sect;[#region-startLine])
and `startColumn` (&sect;[#region-startColumn]) properties.
`startLine` shall be present.
If `startColumn` is absent, the region shall be considered to start at column 1.
For the remainder of this section, whenever `startColumn` is mentioned, it includes the case where `startColumn` is absent
and so is considered to be 1.

The end of a text region shall be represented either by a combination of the `endLine`
(&sect;[#region-endLine]) and `endColumn` (&sect;[#region-endColumn]) properties,
or by the `length` property (&sect;[#region-length]).

If `endLine` is absent and `endColumn` is present, `endLine` shall be considered to be the same as `startLine`.

If `endLine` is present and `endColumn` is absent, then:

* if `endLine` is the same as `startLine`, then `endColumn` shall be considered to be the same as `startColumn`.

* If `endLine` is different from `startLine`, then `endColumn` shall be considered to be 1.

For the remainder of this section, whenever `endLine` is mentioned, it includes the case where `endLine` was absent
and so is considered to be the same as `startLine`.

For the remainder of this section, whenever `endColumn` is mentioned, it includes the case where
`endColumn` was absent and so has its default value, which depends on the value of `endLine`
as described above.

If `endLine` is the same as `startLine` and `startColumn` is the same as `endColumn`,
the length of the region shall be considered to be 0.

If `length` is present, it shall be non-negative and shall represent a count of characters.

If none of `endLine`, `endColumn`, or `length` is present, the length of the region shall be considered to be 0.

`endLine` shall be greater than or equal to `startLine`.

If `endLine` is equal to `startLine`, then `endColumn` shall be greater than or equal to `startColumn`.

To represent a region that includes the last character in a line,
excluding any trailing newline sequence,
`endColumn` shall be set to a value 1 greater than the number of characters in the line,
excluding the newline sequence if present.
This is the case even for the last line of the file, which might not end with a newline sequence.

~ IsoExample
Suppose a text file contains the following line, on line 5:

```
abcde
```

Then the region with `startLine` = 5, `startColumn` = 3, `endLine` = 5, and `endColumn` = 6
represent the three characters `cde`.
This is the case whether or not the line ends with a newline sequence.
~

To include a newline sequence in a region, `endLine` shall be greater than `startLine`.

~ IsoExample
Suppose a text file contains the following lines, starting on line 5:

```
abcde
fg
```

Then the region with `startLine` = 5, `startColumn` = 3, `endLine` = 6, and `endColumn` = 1
represent the three characters `cde` plus a newline sequence.
~

### Binary regions { #region-binaryFiles }

The start of a binary region shall be represented by the `offset` property (&sect;[#region-offset]),
which denotes the offset in bytes from the start of the file.

The offset of the first byte in a file shall have the value 0.

The end of a binary region shall be represented by the `length` property (&sect;[#region-length]),
which denotes a count of bytes. If `length` is absent, the length of the region shall be considered to be 0.

In a binary region, the `startLine` (&sect;[#region-startLine]), `startColumn` (&sect;[#region-startColumn]),
`endLine` (&sect;[#region-endLine]), and `endColumn` (&sect;[#region-endColumn])
properties shall be absent.

### `startLine` property { #region-startLine }

When a `region` object represents a text region, it shall contain a property named `startLine`,
which shall have an integer value equal to the line number of the line containing the first character in the region.

The line number of the first line in the file is defined to be 1.

### `startColumn` property { #region-startColumn }

When a `region` object represents a text region, it may contain a property named `startColumn`,
which shall have an integer value equal to the column number of the first character in the region.

The column number of the first column on each line is defined to be 1.

If `startColumn` is absent, it shall be inferred as specified in &sect;[#region-textFiles].

### `endLine` property { #region-endLine }

When a `region` object represents a text region,
it may contain a property named `endLine` which shall have an integer value equal to
the line number of the line containing the last character in the region.

If `endLine` is absent, it shall be inferred as specified in &sect;[#region-textFiles].

### `endColumn` property { #region-endColumn }

When a `region` object represents a text region,
it may contain a property named `endColumn` which shall have an integer value equal to
the column number of the last character in the region.

If `endColumn` is absent, it shall be inferred as specified in  &sect;[#region-textFiles].

### `offset` property { #region-offset}

When a `region` object represents a binary region,
it shall contain a property named `offset` which shall have a non-negative integer value equal to
the byte offset from the beginning of the file of the first byte in the region.

When a `region` object represents a text region, the `offset` property may be present.
In this case, it represents the character offset from the beginning of the file of the first
character in the region.

### `length` property { #region-length }

A `region` object may contain a property named `length` whose value is a non-negative integer.

When the `region` object represents a text region,
the value of `length` shall be the number of characters in the region.
If the region consists of 0 characters, then `length` shall either be absent or shall have the value 0.

When a `region` object represents a binary region,
the value of `length` shall be the number of bytes in the region.
If the region consists of 0 bytes, then `length` shall either be absent or shall have the value 0.

The sum of the `offset` (&sect;[#region-offset]) and `length` properties shall be greater than or equal to 0,
and less than or equal to the length the file, which is measured in characters for a text region
and in bytes for a binary region.

A `region` whose `offset` is equal to the length of the file and whose `length` is 0 legal,
and represents an insertion point at the end of the file.

## `logicalLocation` object { #logicalLocation }

### General { #logicalLocation-General }

A `logicalLocation` object describes a logical location.

`logicalLocation` objects occur as property values within the `run.logicalLocations` object (&sect;[#run-logicalLocations]).

### `name` property { #logicalLocation-name }

A `logicalLocation` object shall contain a property named `name` whose value is a string that identifies
the construct in which the result occurred.
For example, this property might contain the name of a class or a method.

The `name` property need not be suitable for display.

~ IsoExample
A C++ analysis tool might emit the `name` property of a function as the "decorated" function name,
which encodes the function signature in a manner that is compiler-dependent and not easily readable.
~


If the `logicalLocation` object describes a top-level logical location,
and if the `name` property would be equal to the name of the corresponding property, then the `name` property may be absent.

~ IsoNumberedExample { @IsoNumberedExample=1 }
In this example, the logical location is a top-level C++ function named `functionF`, and `name` is omitted.
```
"logicalLocations": {
    "functionF": {
        "kind": "function"
    }
}
```
~

~ IsoNumberedExample
In this example, the logical location is a top-level C++ function, and `name` is equal to the property name.
```
"logicalLocations": {
    "functionF": {
        "name": "functionF",
        "kind": "function"
    }
}
```
~

~ IsoNumberedExample
In this example, the logical location is a top-level C++ function,
but `name` is not equal to the property name, so it cannot be omitted.
```
"logicalLocations": {
    "functionF-0": {
        "name": "functionF",
        "kind": "function"
    }
}
```
~

### `kind` property { #logicalLocation-kind }

A `logicalLocation` object should contain a property named `kind` whose value is one of the following strings,
if any of those strings accurately describes the construct identified by this object:

*   `"function"` 
*   `"member"`
*   `"module"`
*   `"namespace"`
*   `"package"`
*   `"resource"`
*   `"type"`

If none of those strings accurately describes the construct, `kind` may contain any value specified by the analysis tool.

### `parentKey` property { #logicalLocation-parentKey }

If the logical location represented by the `logicalLocation` object is a nested logical location,
then the `logicalLocation` object shall contain a property named `parentKey` whose value is a string 
that matches the property name of the parent `logicalLocation` object within
`run.logicalLocations` (&sect;[#run-logicalLocations]).

If the logical location represented by the `logicalLocation` object is a top-level logical location,
then the `parentKey` property shall be absent.

## `codeFlow` object { #codeFlow }

### General { #codeFlow-General }

A code flow is a sequence of locations that specify a possible execution path through the code.

### `message` property { #codeFlow-message }

A `codeFlow` object may contain a property named `message` whose value is a string containing
a message relevant to the code flow.

### `locations` property { #codeFlow-locations }

A `codeFlow` object shall contain a property named `locations` whose value is an array of
one or more `annotatedCodeLocation` objects (&sect;[#annotatedCodeLocation]).
Each element of the array shall represent a single location visited by the tool
in the course of producing the result.
This array need not include every location visited by the tool,
but the elements that are present shall occur in the order that the tool visited them.
The elements need not be unique.

~ IsoNote
The `locations` array might include multiple identical elements if, for example,
the analysis tool simulated the execution of a loop in the course of producing the result.
~

### `properties` property { #codeFlow-properties }

A `codeFlow` object may contain a property named `properties` whose value is a property bag (&sect;[#property-bags]).
This allows tools to include information about the code flow that is not explicitly specified in the SARIF format.

## `stack` object { #stack }

### General { #stack-General }

A `stack` object describes a single call stack.
A call stack is a sequence of nested function calls, each of which is referred to as a stack frame.

### `message` property { #stack-message }

A `stack` object may contain a property named `message` whose value is a string
containing a message relevant to this call stack.

### `frames` property { #stack-frames }

A `stack` object shall contain a property named `frames` whose value is an array of one or more `stackFrame` objects (&sect;[#stackFrame]).
This array shall include every function call in the stack for which the tool has information,
and the entries that are present shall occur in chronological order with the most recent (innermost) call first and the least recent (outermost) call last.
The entries in this array need not be unique.

~ IsoNumberedNote { @IsoNumberedNote=1 }
It is possible for the same frame to occur multiple times if the call stack includes a recursion. 
~

~ IsoNumberedNote
It is possible that the analysis tool will not have location information for every frame in the call stack.
This might happen if, for example, application code for which location information is available calls into operating system code
for which location information is not available, which in turn calls back into application code.
~

### `properties` property { #stack-properties }

A `stack` object may contain a property named `properties` whose value is a property bag (&sect;[#property-bags]).
This allows tools to include information about the stack that is not explicitly specified in the SARIF format.

## `stackFrame` object { #stackFrame }

### General { #stackFrame-General }

A `stackFrame` object describes a single stack frame within a call stack (&sect;[#stack]).

### `message` property { #stackFrame-message }

A `stackFrame` object may contain a property named `message` whose value is a string
containing a message relevant to this stack frame.

### `uri` property { #stackFrame-uri }

A `stackFrame` object may contain a property named `uri` whose value is a string
containing the URI of the source code file to which this stack frame refers.

### `uriBaseId` property { #stackFrame-uriBaseId }

If the `uri` property (&sect;[#stackFrame-uri]) is present and contains a relative URI,
then the `stackFrame` object may contain a property named `uriBaseId` whose value is
a string containing a URI base id (see &sect;[#fileFormat-uriBaseIdProperties]) which indirectly specifies
the absolute URI with respect to which `uri` shall be interpreted.

If the `uri` property is absent or contains an absolute URI, then the `uriBaseId` property
shall be absent.

### `line` property { #stackFrame-line }

A `stackFrame` object may contain a property named `line` whose value is an integer
containing the 1-based line number within the file specified by `uri` (&sect;[#stackFrame-uri])
to which this stack frame refers.

If the `uri` property is absent, the `line` property shall be absent.

### `column` property { #stackFrame-column }

A `stackFrame` object may contain a property named `column` whose value is an integer
representing the 1-based column number within the line specified by `line` (&sect;[#stackFrame-line])
to which this stack frame refers.

If the `line` property is absent, the `column` property shall be absent.

### `module` property { #stackFrame-module }

A `stackFrame` object may contain a property named `module` whose value is a string
containing the name of the module that contains the location to which this stack frame refers.

### `threadId` property { #stackFrame-threadId }

A `stackFrame` object may contain a property named `threadId` whose value is an integer which
identifies the thread on which the code at the location specified by this object was executed.

### `fullyQualifiedLogicalName` property { #stackFrame-fullyQualifiedLogicalName }

A `stackFrame` object shall contain a property named `fullyQualifiedLogicalName` whose value
is a string containing the fully qualified name of the method to which this stack frame refers.
See &sect;[#location-fullyQualifiedLogicalName] for examples.

If the `run.logicalLocations` property (&sect;[#run-logicalLocations]) is present,
the value of the `fullyQualifiedLogicalName` property should be equal to the name of one of the properties on the `run.logicalLocations` object,
with one exception, described in &sect;[#stackFrame-logicalLocationKey].

### `logicalLocationKey` property { #stackFrame-logicalLocationKey }

A `stackFrame` object may contain a property named `logicalLocationKey` whose value is a string.
If present, this string shall be equal to the name of one of the properties on the `run.logicalLocations` object (&sect;[#run-logicalLocations]),
which provides additional information about the logical location specified by `fullyQualifiedLogicalName` (&sect;[#stackFrame-fullyQualifiedLogicalName]).
For more information about the purpose of this property, see &sect;[#location-fullyQualifiedLogicalName].

### `address` property { #stackFrame-address }

A `stackFrame` object may contain a property named `address` whose value is a non-negative integer
containing the address in memory of the location represented by this stack frame.

### `offset` property { #stackFrame-offset }

A `stackFrame` object may contain a property named `offset` whose value is a non-negative integer
containing the byte offset of the location represented by this stack frame from the start
of the method represented by this stack frame.

### `parameters` property { #stackFrame-parameters }

A `stackFrame` object may contain a property named `parameters` whose value is an array of strings
representing the parameters of the function call represented by this stack frame.

### `properties` property { #stackFrame-properties }

A `stackFrame` object may contain a property named `properties` whose value is a property bag (&sect;[#property-bags]).
This allows tools to include information about the stack frame that is not explicitly specified in the SARIF format.

## `annotatedCodeLocation` object { #annotatedCodeLocation }

### General { #annotatedCodeLocation-General }

An `annotatedCodeLocation` object represents a physical location together with additional information
relevant to the use of the location in a particular context.

### `step` property { #annotatedCodeLocation-step }

If an `annotatedCodeLocation` object occurs within a `codeFlow`, it may contain a property named `step`.
If the `annotatedCodeLocation` does not occur within a `codeFlow`, the `step` property shall be absent.

The value of the `step` property shall be an integer whose value is
the 1-based sequence number of the location within the code flow,
that is, it shall be 1 for the first location, 2 for the second, and so on.

~ IsoNote
This property has two primary purposes:

1) A viewer can display the identifier next to each location when it displays a code flow.
2) A user reading the log file can easily refer to the location in conversation, for example,
"I think the problem occurs at step 6."
~

### `physicalLocation` property { #annotatedCodeLocation-physicalLocation }

An `annotatedCodeLocation` object should contain a property named `physicalLocation` whose value is a `physicalLocation` object
(&sect;[#physicalLocation]) that specifies the file location to which the `annotatedCodeLocation` object refers.

This property should be absent only if the tool does not have physical location information for this
`annotatedCodeLocation`.

~ IsoNote

This could happen if, for example:

* this `annotatedCodeLocation` refers to a location within a binary for which
the tool does not have associated symbol information.
* this `annotatedCodeLocation` occurs within a `codeFlow` (&sect;[#codeFlow]),
the value of the `kind` property (&sect;[#annotatedCodeLocation-kind]) is `"functionExit"`,
and the tool has chosen not to associate the function exit with a source code location.
* this `annotatedCodeLocation` occurs within a `codeFlow`,
the value of the `kind` property is `"continuation"`,
and the continuation is used purely to record a change to global state
(which might happen asynchronously with respect to the code flow).

~

### `fullyQualifiedLogicalName` property { #annotatedCodeLocation-fullyQualifiedLogicalName }

Depending on the circumstance, an `annotatedCodeLocation` object either should or may contain a property named `fullyQualifiedLogicalName` whose value
is a string containing the fully qualified name of the method to which this `annotatedCodeLocation` refers.
If the `physicalLocation` property (&sect;[#annotatedCodeLocation-physicalLocation]) is absent,
`fullyQualifiedLogicalName` should be present.
Otherwise, `fullyQualifiedLogicalName` may be present. 
See &sect;[#location-fullyQualifiedLogicalName] for examples.

If the `run.logicalLocations` property (&sect;[#run-logicalLocations]) is present,
the value of the `fullyQualifiedLogicalName` property should be equal to the name of one of the properties on the `run.logicalLocations` object,
with one exception, described in &sect;[#annotatedCodeLocation-logicalLocationKey].

### `logicalLocationKey` property { #annotatedCodeLocation-logicalLocationKey }

An `annotatedCodeLocation` object may contain a property named `logicalLocationKey` whose value is a string.
If present, this string shall be equal to the name of one of the properties on the `run.logicalLocations` object (&sect;[#run-logicalLocations]),
which provides additional information about the logical location specified by `fullyQualifiedLogicalName` (&sect;[#stackFrame-fullyQualifiedLogicalName]).
For more information about the purpose of this property, see &sect;[#location-fullyQualifiedLogicalName].

### `module` property { #annotatedCodeLocation-module }

An `annotatedCodeLocation` object may contain a property named `module` whose value is a string
containing the name of the module that contains the code location specified by this object.

### `threadId` property { #annotatedCodeLocation-threadId }

An `annotatedCodeLocation` object may contain a property named `threadId` whose value is an integer which
identifies the thread that was executing when the execution of a code flow reached the location specified by this object.
If this `annotatedCodeLocation` does not occur within a `codeFlow`, the `threadId` property shall be absent.

### `message` property { #annotatedCodeLocation-message }

An `annotatedCodeLocation` object may contain a property named `message` whose value is a string that describes
the significance of this location within a particular context.

### `kind` property { #annotatedCodeLocation-kind }

An `annotatedCodeLocation` object may contain a property named `kind` whose value is a string that categorizes
the location.

If present, the `kind` property shall have one of the following values, with the specified meanings:

* `"alias"`: This location defines an additional name for a variable defined in a declaration.

* `"assignment"`: At this location, an assignment to a variable occurred.

* `"branch"`: At this location, a branch in the execution path occurred.

* `"call"`: This location is the site of a function or method call.
    Every `annotatedCodeLocation` whose `kind` property is `"call"` shall be paired with a
    subsequent `annotatedCodeLocation` whose `kind` property is `"callReturn"` and which refers to the same function,
    unless the `codeFlow` in which the call occurs terminates before the function returns.

* `"callReturn"`: This location is the target of a return from a function or method.

~ IsoNumberedNote { @IsoNumberedNote=1 }
Viewers can use the `"call"` and `"callReturn"` values to clarify the presentation of a code flow
that crosses function boundaries.
For example, when displaying the list of locations in a code flow, a viewer could indent the locations
between a `"call"` and a `"callReturn"`.
~

* `"continuation"`: Execution continued at this location.

~ IsoNumberedNote
This can be used, for example, to designate the target of a jump instruction, or the statement after the end of a loop.
~

* `"declaration"`: The location introduces into the program a name which denotes an entity such as a variable, function, template, _etc_.

* `"functionEnter"`: This location is an entry point to a function or method.
    Every `annotatedCodeLocation` whose `kind` property is `"functionEnter"` shall be paired with a
    subsequent `annotatedCodeLocation` whose `kind` property is `"functionExit"` and which refers to the same function,
    unless the `codeFlow` in which the call occurs terminates before a function exit point is reached. 

* `"functionExit"`: This location represents the conceptual exit from the function,
    used by some analysis tools to represent the final node in the directed acyclic
    graph that represents the control flow through a function.
    A `"functionExit"` may be preceded in the code flow by a `"functionReturn"`.

~ IsoNumberedNote
A tool might choose (for example) to associate a `functionExit` with the closing brace of a function,
or to associate it with the final statement in the function,
or not to associate it with a source code location at all. 
~

* `"functionReturn"`: This is the location of a statement that returns control from a function or method
(for example, a `return` statement).

* `"usage"`: At this location, data is used.

~ IsoNumberedNote
In practice, analysis tools tend to track the usage of _untrusted_ data.
~

~ IsoExample
Suppose an analysis tool produces a result which states that a piece of data from an insecure source
has been used at a particular location.
The tool might provide a "related location" (&sect;[#result-relatedLocations]) whose value is
an `annotatedCodeLocation` object with the message "Insecure data entered the system here". 
~

### `kind`-dependent properties: `target`, `targetLocation`, `values`, and `state` { #annotatedCodeLocation-target }

Depending on the value of its `kind` property (&sect;[#annotatedCodeLocation-kind]),
an `annotatedCodeLocation` object either may, should, or shall not contain:

* a property named `target` whose value is a string.
* a property named `targetLocation` whose value is a `physicalLocation` object (&sect;[#physicalLocation]).
* a property named `values` whose value is an array of strings.
* a property named `state` whose value is an object.

These properties shall appear only in `annotatedCodeLocation` objects that are part of a `codeFlow` (&sect;[#codeFlow]).

The precise interpretation of these properties,
and whether they may, should, or shall not be present,
depends on the value of the `kind` property.

~ IsoNumberedNote { @IsoNumberedNote=1 }
In imprecise terms, the meanings of these properties are as follows:

* `target` represents the thing being operated on at the specified location.
* `targetLocation` represents the physical location of that thing.
* `values` represents a set of values that are input to the operation or produced by the operation.
* `state` is a set of key/value pairs, each of which represents a variable or expression which participates in the operation.
~

If both the `targetLocation` property and the `physicalLocation` property (&sect;[#annotatedCodeLocation-physicalLocation])
of this `annotatedCodeLocation` object are present, then `targetLocation.uri` (&sect;[#physicalLocation-uri]) may be absent,
in which case it is considered to have the same value as `physicalLocation.uri`.

The format of the string value of the `target` property, the elements of the `values` array,
the property names in the `state` object, and the property values in the `state` object,
shall be consistent with the syntax of the programming language in which the code being analyzed was written.

In this section, a "variable name" may be any of the following, unless otherwise specified:

* A simple variable name.
* An object property reference.
* An array element reference.
* A reference to the current object.
* Any combination of these.
* Any valid expression that produces a value.

~ IsoNumberedExample { @IsoNumberedExample=1 }
Examples of valid "variable names" in C++:

* `count`
* `str->length`
* `values[0]`
* `this`
* `this->size`
* `this->car->wheels[0]`
* `func()` (assuming that `func` returns a value)

~

In this section, whenever a "value" is mentioned, it means a string representation of the
value.

~ IsoNumberedExample
Examples of valid "values":

* A integer value of `2` would be represented as `"2"`.
* A string value of `"2"` would be represented as `"\"2\""`.
* A Boolean value of `true` would be represented as `"true"`.

~

~ IsoNumberedNote
In languages where all objects have a built-in string representation (for example, by means of a method such as `ToString()`),
the analysis tool might choose to obtain the string representation by calling that method.
For example, in C#, given an object `uri` of type `System.Uri`, the tool might choose to obtain the string value
by calling `uri.ToString()`, perhaps resulting in `"http://www.example.com"`.
~

The requirements and interpretation of the `target`, `targetLocation`, `values`, and `state` properties are as follows:

* When `kind` is `"alias"`:

    * `target` should be present. If present, its value shall be the name of the alias being created.
    If multiple aliases are created in the same source language statement,
    the analysis tool shall create a separate `annotatedCodeLocation` object for each alias
    that the tool wishes to represent in the log.

    * `targetLocation` shall be absent. 

    * `values` should be present. If present, its value shall be an array with one element, whose
    value is the name of the variable being aliased.

    * `state` may be present. If present, it shall contain a single property whose name is the name
    of the variable being aliased, and whose value is the value of that variable.

* When `kind` is `"assignment"`:

    * `target` should be present. If present, its value shall be the name of the variable being assigned to.
    If multiple variables are assigned to in the same source statement, the analysis tool shall create
    a separate `annotatedCodeLocation` object for each assignment that the tool wishes to represent
    in the log.

    * `targetLocation` shall be absent.

    * `values` should be present. If present, its value shall be an array with one element, whose
    value is the value assigned to the target variable.

    * `state` may be present. If present, it shall contain properties which specify the names and values
    of selected variables or subexpressions which participate in the expression on the right-hand side
    of the assignment.

* When `kind` is `"branch"`:

    * `target` should be present if the target of the branch is a named label, in which case its value shall be
    the name of the label; otherwise, it shall be absent.

    * `targetLocation` may be present. If present, its value shall specify the location of the target of the branch.

    * `values` may be present if the branch is the result of a test, in which case its value shall be
    an array with one element, whose value is the Boolean value of the test condition;
    otherwise, it shall be absent.

    * `state` may be present if the branch is the result of a test, in which case it shall contain
    properties which specify the names and values of selected variables or subexpressions which participate
    in the expression being tested; otherwise, it shall be absent.

* When `kind` is `"call"`:

    * `target` should be present. If present, its value shall be the fully qualified name of the function being called.

    * `targetLocation` may be present. If present, its value shall specify the physical location of the function being called.

    * `values` may be present. If present, its value shall be an array containing the values of the arguments
    passed to the function.
    This array shall not include the implicit object reference (for example, `this`) passed to object method calls.

    * `state` may be present. If present, it shall contain properties which specify the names and values of
    selected variables or subexpressions participating in the expressions passed as arguments to the function.
    For object method calls, this may include the name and value of the object on which the method was invoked,
    or any variables or subexpressions which participate in an expression which resolves to that object.

* When `kind` is `"callReturn"`:

    * `target` should be present. If present, its value shall be the fully qualified name of the function
    being returned from.

    * `targetLocation` shall be absent.

    * `values` may be present, in which case its value shall be an array containing the value or values
    returned from the function; otherwise, it shall be absent.

    * `state` may be present. If present, it shall contain the names and values of any parameters
    that were passed by reference to the called function and whose value was reassigned by the called function.

* When `kind` is `"continuation"`:

    * `target` shall be absent.

    * `targetLocation` shall be absent.

    * `values` shall be absent.

    * `state` may be present. If present, it shall contain the names and values of selected variables or
    expressions at the specified location. Any variable that is in scope at the specified location may be
    mentioned or used in an expression.

* When `kind` is `"declaration"`:

    * `target` should be present. If present, its value shall be the name of the variable being declared.
    If multiple variables are declared in the same source statement, the analysis tool shall create
    a separate `annotatedCodeLocation` object for each declaration that the tool wishes to represent
    in the log.

    * `targetLocation` shall be absent.

    * `values` may be present if the declaration has an initializer, in which case its value shall be
    an array containing one element, whose value shall be the value of the initializer expression,
    or if the variable is automatically initialized to a default value, in which case its value shall be
    an array containing one element, whose value shall be that default value;
    otherwise, it shall be absent.

    * `state` may be present if the declaration has an initializer, in which case it shall contain
    the names and values of selected variables or subexpressions participating in the initializer expression;
    otherwise, it shall be absent.

* When `kind` is `"functionEnter"`:

    * `target` should be present. If present, its value shall be the fully qualified name of the function
    being entered. If there is a matching `functionExit`, then either both of them or neither of them
    shall specify `target`, and if they do, their values shall be the same.

    * `targetLocation` shall be absent.

    * `values` may be present. If present, its value shall be an array containing the values of the
    arguments passed to the function.
    This array shall not include the implicit object reference (for example, `this`) passed to object method calls.

    * `state` may be present. If present, it shall contain the names and values of selected variables
    or expressions at the specified location.
    Any variable whose value is available at the specified location may be mentioned or used in an expression.

* When `kind` is `"functionExit"`:

    * `target` should be present. If present, its value shall be the fully qualified name of the function
    being returned from. If there is a matching `functionEnter`, then either both of them or neither of them
    shall specify `target`, and if they do, their values shall be the same.

    * `targetLocation` shall be absent.

    * `values` may be present if the function returns a value or values, in which case its value shall be
    an array containing the value or values returned from the function; otherwise, it shall be absent.

    * `state` shall be absent.

* When `kind` is `"functionReturn"`:

    * `target` should be present. If present, its value shall be the fully qualified name of the function
    being returned from. If there is a matching `functionEnter`, then either both of them or neither of them
    shall specify `target`, and if they do, their values shall be the same.

    * `targetLocation` shall be absent.

    * `values` may be present if the function returns a value or values, in which case its value shall be
    an array containing the value or values returned from the function; otherwise, it shall be absent.

    * `state` may be present if the function returns a value or values, in which case it shall contain
    properties which specify the names and values of selected variables or subexpressions which participate
    in the expressions which produce the returned value or values; otherwise, it shall be absent.

* When `kind` is `"usage"`:

    * `target` should be present. If present, its value shall be the name of the variable being used.
    If multiple variables are used in the same source statement, the analysis tool shall create
    a separate `annotatedCodeLocation` object for each usage that the tool wishes to represent
    in the log.

    * `targetLocation` shall be absent.

    * `values` may be present. If present, its value shall be an array with one element,
    whose value is the value of the used variable at the specified location.

    * `state` shall be absent.

~IsoNumberedExample
In C++, if the source code contains the declaration

```
std::string &str = name;
```

then the value of `kind` would be `"alias"`, the value of `target` would be `"str"`, the value of `values` would be

```
[ "name" ]
```

and the value of `values` might be

```
{ "name": "\"John\"" }
```
~

~IsoNumberedExample
In C++, if the source code contains the declaration

```
std::string &str = name, &str2 = address;
```

and if the tool creating the log wished to represent both aliases in the log file, then the tool would create
two `annotatedCodeLocation` objects, each with `kind` set to `"alias"`, and referring to the same source line.
~

~IsoNumberedExample
In C++ or C#, if the source code contains the assignment

```
m = n + p;
```

then the value of `kind` would be `"assignment"`, the value of `target` would be `"m"`, the value of `values` might be

```
[ "5" ]
```

and the value of `state` might be

```
{  "n": "2", "p": "3" }
```

Or, since `state` can include expressions, the value of `state` might be

```
{  "n + p": "5" }
```

or even

```
{  "n": "2", "p": "3", "n + p": "5" }
```

~

~IsoNumberedExample
In C#, if the source code contains the test

```
if (s.Length > 0 && y > 2 && valid())
```

then the value of `kind` would be `"branch"`, `target` would be absent, the value of `values`
might be

```
[ "true" ]
```

and the value of `state` might be

```
{ "s": "\"A string\"", "y": "3" }
```

or perhaps

```
{ "s": "\"A string\"", "s.Length": "8", "y": "3", "valid()": "true" }
```
~

~IsoNumberedExample
In C++ or C#, if the source code contains the function call

```
func(7, m + n, "s", this, g(2));
```

then the value of `kind` would be `"call"`, the value of `target` might be `"func"` (or, for example, `"N.C.func"` if
the function `func` occurred in class `C` in namespace `N`), the value of `values` would be

```
[ "7", "m + n", "\"s\"", "this", "g(2)" ]
```

and the value of `state` might be

```
{ "m": "2", "n": "3" }
```

If present, the value of `targetLocation` would be the physical location where `func` is defined.

~

~ IsoNumberedExample
In C#, if the source code contains the method invocation

```
example.Func(n);
```

where `example` is an object of type `SomeClass`, then the value of `kind` would be `"call"`,
the value of `target` would be `"SomeClass.Func"`, the value of `values` might be

```
[ "5" ]
```

and the value of `state` might be

```
{ "example": "null", "n": "5" }
```

(assuming that the method was mistakenly invoked on a null reference).
~

~IsoNumberedExample
In C++ or C#, if the source code contains the function call:

```
int n = func();
```

then the value of `kind` would be `"callReturn"`, the value of `target` might be `"func"` (or, for example, `"N.C.func"` if
the function `func` occurred in class `C` in namespace `N`), the value of `values` might be

```
[ "5" ]
```

(assuming that the function returned the value `5`), and `state` would be absent. 

~

~IsoNumberedExample
In C++ or C#, if the source code contains the declaration

```
int m = n + p;
```

then the value of `kind` would be `"declaration"`, the value of `target` would be `"m"`,
the value of `values` might be

```
[ "5" ]
```

and the value of `state` might be

```
{ "n": "2", "p": "3" }
```

~

~IsoNumberedExample
In C++ or C#, if the source code contains the declaration

```
int m = n + p, q = k + r;
```

and if the tool creating the log wished to represent the declarations of both variables in the log file, then the tool would create
two `annotatedCodeLocation` objects, each with `kind` set to `"declaration"`, and referring to the same source line.
~

~IsoNumberedExample
In C++ or C#, if the source code contains the `return` statement

```
int func()
{
    ...
    return m + n;
}
```

then the value of `kind` would be `"functionExit"`, the value of `target` might be `"func"` (or, for example, `"N.C.func"` if
the function `func` occurred in class `C` in namespace `N`), the value of `values` might be

```
[ "5" ]
```

and the value of `state` might be

```
{ "m": "2", "n": "3" }
```
~

If the `run.logicalLocations` property (&sect;[#run-logicalLocations]) is present,
and the value of `kind` is `"call"`, then
the value of the `target` property should be equal to the name of one of the properties on the `run.logicalLocations` object,
with one exception, described in &sect;[#annotatedCodeLocation-targetKey].

### `targetKey` property { #annotatedCodeLocation-targetKey }

The `annotatedCodeLocation` object may contain a property named `targetKey` whose value is a string.
If present, this string shall be equal to the name of one of the properties on the `run.logicalLocations` object (&sect;[#run-logicalLocations]),
which provides additional information about the function specified by `target` (&sect;[#annotatedCodeLocation-target]).

`targetKey` is only necessary if, in the course of a run, the tool encounters two or more
distinct functions with the same fully qualified logical name.
In that case, the tool shall synthesize a unique name by appending a suffix to `target`,
assign the resulting string to `targetKey`, and use that string as the key into the `run.logicalLocations` dictionary.

### `importance` property { #annotatedCodeLocation-importance }

An `annotatedCodeLocation` object may contain a property named `importance` whose value is a string
that specifies the importance of this `annotatedCodeLocation` in understanding the `codeFlow` object
(&sect;[#codeFlow]) in which it occurs.
If this `annotatedCodeLocation` does not occur within a `codeFlow`, the `importance` property shall be absent.

If present, the `importance` property shall have one of the following values, with the specified meanings:

* `"important"`: this location is important for understanding the code flow.

* `"essential"`: this location is essential for understanding the code flow.

* `"unimportant"`: this location contributes to a more detailed understanding of the code flow, but is not normally needed. 

If this property is absent, it shall be considered to have the value `"important"`.

~ IsoNote
A viewer might use this property to offer the user three options for viewing a lengthy code flow:

* A "normal view," which omits locations whose `importance` property is `"unimportant"`.
* An "abbreviated view," which displays only those locations whose `importance` property is
`"essential"`.
* A "verbose view," which displays all the locations in the code flow.
~

### `taintKind` property { #annotatedCodeLocation-taintKind }

An `annotatedCodeLocation` object may contain a property named `taintKind` whose value is a string which
classifies state transitions in code locations relevant to a taint analysis.

If present, the `taintKind` property shall have one of the following values, with the specified meanings:

* `"source"`: At this location, untrusted data enters the system (for example, by being provided by a user or read from a file on disk).

* `"sanitizer"`: This is the location of a statement (for example, a function call), after the execution of which data that entered the system from outside (for example, from user input)
is presumed to be safe.

* `"sink"`: At this location, untrusted data enters some security-sensitive code (for example, an `eval` statement
that converts untrusted text to executable code).

### `snippet` property { #annotatedCodeLocation-snippet }

An `annotatedCodeLocation` object may contain a property named `snippet` whose value is a string containing
the text of the source code lines specified by `annotatedCodeLocation.physicalLocation.region`.

### `annotations` property { #annotatedCodeLocation-annotations }

An `annotatedCodeLocation` object may contain a property named `annotations` whose value is an array containing
one or more unique (&sect;[#unique-array-properties]) `annotation` objects (&sect;[#annotation]),
each of which describes one or more additional physical locations which are relevant to this
`annotatedCodeLocation` object.

~ IsoExample
Consider an `annotatedCodeLocation` object which describes the declaration statement

```
    int x = (y + z) * q;
```

The `kind` property would be `"declaration"`, the `target` property would be `"x"`, the `values` property
might be `"42"`, and the `state` property might be

```
{ "y": "2", "z": "4", "y + z": "6", "q": "7" }
```

Now, if the analysis tool wanted to emphasize the value of the expression `(y + z)`, for example, to allow
a viewer to highlight the expression, or to display a message when the mouse hovered over the expression,
it might set the `annotations` property to

```
[                                       # an array of annotation objects
 {                                      # an annotation object
    "message": "(y + z) = 42",
    "locations": [                      # an array of physicalLocation objects
      {                                 # a physicalLocation object
                                        # The uri property can be omitted if it is the same
                                        # as annotatedCodeLocation.physicalLocation.uri
        "region": {
          "startLine": 12,
          "startColumn": 13,
          "endColumn": 19
        }
      }
    ]
  }
]
```

~

For any integer array indices `i` and `j`, if value the of the property `annotatedCodeLocation.annotations[i].locations[j].uri`
is the same as the value of the property `annotatedCodeLocation.physicalLocation.uri`, then the `uri` property may be
omitted from the `physicalLocation` object `annotatedCodeLocation.annotations[i].locations[j]`, as in the example above.
In that case, `annotatedCodeLocation.annotations[i].locations[j].uri` is considered to have the
same value as `annotatedCodeLocation.physicalLocation.uri`.

### `properties` property { #annotatedCodeLocation-properties }

An `annotatedCodeLocation` object may contain a property named `properties` whose value is a property bag (&sect;[#property-bags]).
This allows tools to include additional information about the use of the location in this context that is not explicitly specified in the SARIF format.

## `annotation` object { #annotation }

### General { #annotation-General }

An `annotation` object associates a message with one or more physical locations.

### `message` property { #annotation-message }

An `annotation` object shall contain a property named `message` whose value is a string that describes the physical location or locations
specified by the `locations` property (&sect;[#annotation-locations]).

### `locations` property { #annotation-locations }

An `annotation` object shall contain a property named `locations` whose value is an array containing one or more
unique (&sect;[#unique-array-properties]) `physicalLocation` objects (&sect;[#physicalLocation]) to which the `message` (&sect;[#annotation-message])
is relevant.

## `rule` object { #rule }

### General { #rule-General }

A `rule` object contains information that describes a rule.

### Constraints

Either the `shortDescription` property (&sect;[#rule-shortDescription])
or the `fullDescription` property (&sect;[#rule-fullDescription])
or both shall be present.

### `id` property { #rule-id }

A `rule` object shall contain a property named `id` whose value is a string containing
a stable, opaque identifier for the rule.

~ IsoExample
`"CA2101"`
~

~ IsoNote
Rule identifiers must be stable for two reasons:

1. So build automation scripts can refer to specific checks, for example, to disable them,
without the risk of a script breaking if a rule id changes.
2. So result management systems can compare results from one run to the next,
without erroneously designating results as "new" because a rule id has changed.

Rule identifiers should be opaque -- that is, they should not convey information to
a user -- because a rule's implementation might change over time.
Suppose a rule id is `"DoNotDoXOrY"`, suppose circumstances change so that
"Y" is now acceptable, and suppose the implementation of the rule changes accordingly.
Because the rule id must not change, the string `"DoNotDoXOrY"` will continue to be persisted to logs,
where it will convey outdated guidance to users in a way that an opaque identifier
such as `"CA2101"` would not.
~

### `name` property { #rule-name }

A `rule` object may contain a property named `name` whose value is a string containing
a rule identifier that is understandable to an end user.
If `name` contains implementation details that change over time,
a tool author might alter a rule's `name` (while leaving
the stable `id` property unchanged).

~IsoNote
A rule `name` is suitable in contexts where a readable identifier is preferable and where the
lack of stability is not a concern.
~

~ IsoExample
`"SpecifyMarshalingForPInvokeStringArguments"`
~

### `shortDescription` property { #rule-shortDescription }

A `rule` object may contain a property named `shortDescription` whose value is a string containing
a concise description of the rule. The `shortDescription` property should be a single sentence that is understandable
when visible space is limited to a single line of text.

~ IsoExample
`"Specify marshaling for P/Invoke string arguments"`
~

### `fullDescription` property { #rule-fullDescription}

An `rule` object should contain a property named `fullDescription` whose value is a string that describes the rule.

The `fullDescription` property should, as far as possible, provide details sufficient to enable resolution of any problem indicated by the result. 

The `fullDescription` property should conform to the guidelines for message properties (&sect;[#message-properties]);
in particular, the first sentence of the `fullDescription` property should provide a concise description of the rule,
suitable for display in cases where available space is limited.
Tools that construct `fullDescription` in this way need not provide a value for the `shortDescription` property.
Tools that do not construct `fullDescription` in this way should provide a value for the `shortDescription` property,
because otherwise, the initial portion of `fullDescription` that a viewer displays where available space is limited
might not be understandable.

### `defaultLevel` property { #rule-defaultLevel }

A `rule` object may contain a property named `defaultLevel` whose value is one of
the strings `"warning"`, `"error"`, or `"note"`, with the same meanings as when those strings appear
as the value of the `result.level` property (&sect;[#result-level]).

If this property is absent, it shall be considered to have the value `"warning"`.

The value of this property specifies the default value of the `level` property
for any `result` object which refers to this rule through its `ruleId` property (&sect;[#result-ruleId]) or its `ruleKey` property (&sect;[#result-ruleKey]),
and which does not itself specify a `level` property.

### `messageFormats` property { #rule-messageFormats }

A `rule` object may contain a property named `messageFormats` whose value is a JSON object
consisting of a set of name/value pairs with arbitrary names.

The value within each name/value pair shall be a string, which we refer to as a "message format,"
that can be used to construct a formatted message in combination with
an arbitrary number of additional strings, which we refer to as "arguments" (see &sect;[#formattedMessage-arguments]).

A message format shall consist of plain text interspersed with zero or more placeholders.
Each placeholder shall be of the form "`{`_n_`}`", where _n_ is a non-negative integer
which represents a 0-based index into the list of arguments.
When a viewer or other program displays a message whose format is specified by a
message format, it shall replace every occurrence of the placeholder `{`_n_`}`
with the string value at index _n_ in the list of arguments.
Within a message format, the characters "`{`" and "`}`" shall be represented by
the character sequences "`{{`" and "`}}`" respectively.

Aside from the presence of the placeholders, a message format should conform to
the guidelines for message properties (&sect;[#message-properties]).

~ IsoExample
Given a message format:
```
The variable "{0}" defined on line {1} is never used. Consider removing "{0}".
```
together with the arguments "`x`" and "`12`", a viewer would display the formatted string
```
The variable "x" defined on line 12 is never used. Consider removing "x".
```
~

The set of names appearing in the `messageFormats` property shall contain at least the set of strings
which occur as values of the `result.formattedMessage.formatId` property in the result log.
The `messageFormats` property may contain additional name/value pairs whose names do not appear
as the value of the `result.formattedMessage.formatId` property for any result in the result log.

~IsoNote
Additional name/value pairs are permitted in the `messageFormats` property
for the convenience of tool vendors, who might find it easier to emit the entire set of messages
supported by a rule, rather than restricting it to those messages that happen to appear in the
result log.
~

~ IsoExample

````
{
    "objectCreation" : "{0} creates a new instance of {1} which is never used.
	                    Pass the instance as an argument to another method, assign the instance to a variable,
						or remove the object creation if it is unnecessary.",  
    "stringReturnValue" : "{0} calls {1} but does not use the new string instance that the method returns.
	                       Pass the instance as an argument to another method, assign the instance to a variable,
						  or remove the call if it is unnecessary."        
}
````
~

### `helpUri` property { #rule-helpUri }

A `rule` object may contain a property named `helpUri` whose value is a string
containing the URI where the primary documentation for the rule can be found.

~ IsoNote
The documentation might include examples, contact information for the rule authors,
and links to additional information about the rule.
~

### `properties` property { #rule-properties }

A `rule` object may contain a property named `properties` whose value is a property bag (&sect;[#property-bags]).
This allows tools to include information about the rule that is not explicitly specified in the SARIF format.

## `formattedMessage` object { #formattedMessage }

### General { #formattedMessage-General }

A `formattedMessage` object contains information that can be used to construct a formatted message that describes a result.

### `formatId` property { #formattedMessage-id }
A `formattedMessage` object shall contain a property named `formatId` whose value is a string that identifies the message format
used to format the message that describes this result.
The value of `formatId` shall correspond to one of the names in the set of name/value pairs contained in the `messageFormats` property (&sect;[#rule-messageFormats])
of the `rule` object (&sect;[#rule]) whose `id` property (&sect;[#rule-id]) matches the `ruleId` property (&sect;[#result-ruleId]) of this result.

### `arguments` property { #formattedMessage-arguments }
If the message format string specified by `formatId` contains any placeholders,
the `formattedMessage` object shall contain a property named `arguments`,
whose value is an array of string values that will be used, in combination with a message format,
to construct a result message.
The array shall have as many elements are there are distinct placeholders in the message format.
The array element at index _n_ shall correspond to the placeholder `{n}` in the message format.

If the message format string specified by `formatId` does not contain any placeholders,
the `arguments` property shall be absent.

~IsoExample

Suppose `formatId` refers to the following message format:

```
The variable "{0}" defined on line {1} is never used. Consider removing "{0}".
```

There are two distinct placeholders, `{0}` and `{1}` (although `{0}` occurs twice).
Therefore the `arguments` array will have two elements, the first corresponding to `{0}`
and the second corresponding to `{1}`.
~

## `fix` object { #fix }

### General { #fix-General }

A `fix` object represents a proposed fix for the problem indicated by the `result` object (&sect;[#result]) in which it occurs.
It specifies a set of files to modify.
For each file, it specifies which bytes to remove, and provides new bytes to be inserted.

~IsoExample

````
    {                                                     # a result object (see \(&sect;[#result]\))
        "fix":
        {
            "description":                                # see \(&sect;[#fix-description]\)
                "Private member names begin with '_'",
            "fileChanges":                                # see \(&sect;[#fix-fileChanges]\)
            [
                {                                         # a fileChange object (see \(&sect;[#fileChange]\))
                    ...
                }
            ]
        }
    }
````

~

### `description` property { #fix-description }

A `fix` object should contain a property named `description` whose value is a string describing the proposed fix.

~IsoNote
The purpose of the `description` property is to enable a result log viewer to present the proposed fix to the end user.
~

~IsoExample
`"Combine declaration and initialization of variable x"`
~

### `fileChanges` property { #fix-fileChanges }

A `fix` object shall contain a property named `fileChanges` whose value is a JSON array of
one or more `fileChange` objects (&sect;[#fileChange]).

~IsoNote
A `fix` object that does not change any files is not meaningful.
~

## `fileChange` object { #fileChange }

### General { #fileChange-General }

A `fileChange` object represents a change to a single file.

~IsoExample

````
    {                                      # a fix object (see \(&sect;[#fix]\))
        "fileChanges":                     # see \(&sect;[#fix-fileChanges]\)
        [
            {                              # a fileChange object
                "uri": "a.h",              # see \(&sect;[#fileChange-uri]\)
                "replacements":            # see \(&sect;[#fileChange-replacements]\)
                [
                    {                      # a replacement object (see \(&sect;[#replacement]\))
                        ...
                    },
                    {                      # another replacement object.
                        ...
                    }
                ]
            }
        ]
    }

````

~

### `uri` property { #fileChange-uri }

A `fileChange` object shall contain a property named `uri` whose value is a string value that represents
the location of the file as a valid URI (&sect;[#fileFormat-uriProperties]).

### `uriBaseId` property { #fileChange-uriBaseId }

If the `uri` property (&sect;[#fileChange-uri]) contains a relative URI,
then the `fileChange` object may contain a property named `uriBaseId` whose value is
a string containing a URI base id (see &sect;[#fileFormat-uriBaseIdProperties]) which indirectly specifies
the absolute URI with respect to which `uri` shall be interpreted.

If the `uri` property contains an absolute URI, then the `uriBaseId` property
shall be absent.

### `replacements` property { #fileChange-replacements }

A `fileChange` object shall contain a property named `replacements` whose value is a JSON array of
one or more `replacement` objects (&sect;[#replacement]),
each of which represents the replacement of a single range of bytes in the file specified by the
`uri` property (&sect;[#fileChange-uri]).

~IsoNote
A `fileChange` object that does not modify any bytes in the file is not meaningful.
~

## `replacement` object { #replacement }

### General { #replacement-General }

A `replacement` object represents the replacement of a single range of bytes in a file.
It specifies the location within the file where the replacement is to be made,
the number of bytes to remove at that location,
and a sequence of bytes to insert at that location.

If a `replacement` object specifies both the removal of a byte range
by means of the `deletedLength` property (&sect;[#replacement-deletedLength])
and the insertion of a sequence of bytes
by means of the `insertedBytes` property (&sect;[#replacement-insertedBytes]),
then the effect of the replacement shall be as if the removal were performed before the insertion.

If a single `fileChange` object (&sect;[#fileChange]) specifies more than one `replacement`,
then the effect of the replacements shall be as if they were performed
in the order they appear in the `replacements` array (&sect;[#fileChange-replacements]).
The `offset` property (&sect;[#replacement-offset]) of each `replacement` shall specify
an offset in the unmodified file.

~IsoExample

Suppose a `fileChange` object contains a `fileChanges` property whose value is the following
array of two `replacement` objects:

````
    "fileChanges":
    [
        {
            "offset": 12,
            "deletedLength": 5,
            "insertedBytes": "ZXhhbXBsZQ=="   # The string "example"
        },

        {
            "offset": 20,
            "deletedLength": 3
        }
    ]
````

The first `replacement` object removes 5 bytes starting at offset 12; that is, it removes bytes 12&ndash;16.
Then it inserts 7 bytes (the UTF-8-encoded string `example`, itself encoded in MIME Base64)
at the same offset.

The second `replacement` object removes 3 bytes starting at offset 20 _with respect to the
unmodified file_. Since 5 bytes were removed and 7 bytes inserted _before_ byte 20, the
3 bytes removed actually start at byte 22.

~

### Constraints { #replacement-Constraints }

In any `replacement` object, either the `deletedLength` property (&sect;[#replacement-deletedLength])
shall be present and have a value greater than 0,
or the `insertedBytes` property (&sect;[#replacement-insertedBytes])
shall be present and have a string value whose length is greater than zero,
or both.

~IsoNote
A `replacement` object in which the `deletedLength` property was absent or had a value of 0,
and in which the `insertedBytes` property was absent or had a value equal to the empty string,
would neither insert nor remove any bytes, and so would not be meaningful.
~

### `offset` property { #replacement-offset }

A `replacement` object shall contain a property named `offset` whose value is a non-negative
integer specifying the offset in bytes from the beginning of the file at which bytes are to be removed,
inserted, or both.
An offset of 0 shall denote the first byte in the file.

### `deletedLength` property { #replacement-deletedLength }

A `replacement` object may contain a property named `deletedLength` whose value is a
non-negative integer specifying the number of bytes to delete,
starting at the byte offset specified by
the `offset` property (&sect;[#replacement-offset]),
measured from the beginning of the file.

If `deletedLength` is absent, or if its value is 0,
no bytes shall be deleted.

### `insertedBytes` property { #replacement-insertedBytes }

A `replacement` object may contain a property named `insertedBytes` whose value is a string
that specifies the byte sequence to be inserted at the byte offset specified by
the `offset` property (&sect;[#replacement-offset]),
measured from the beginning of the file.

If `insertedBytes` is absent, or if its value is the empty string,
no bytes shall be inserted.

If the file into which the bytes are to be inserted is a binary file,
the value of the `insertedBytes` string shall be the MIME Base64 encoding
of the byte sequence to be inserted.

If the file into which the bytes are to be inserted is a text file,
the characters to be inserted shall first be encoded in UTF-8.
The value of the `insertedBytes` string shall be the MIME Base64 encoding
of the resulting UTF-8 byte sequence.

* TODO: Relationship between original file encoding, offset, and UTF-8 byte sequence.
* TODO: Explain responsibility of viewer/editor to match encoding.

## `notification` object { #notification }

### General { #notification-General }

A `notification` object describes a condition encountered in the course of running an analysis tool
which is relevant to the operation of the tool itself,
as opposed to being relevant to a file being analyzed by the tool.
Conditions relevant to files being analyzed by a tool are represented by `result` objects (&sect;[#result]).

### `id` property { #notification-id }

A `notification` object may contain a property named `id` whose value is a string containing
an identifier for the condition that was encountered.

~ IsoNote
In contrast to rule identifiers (see `rule.id`, &sect;[#rule-id]), which must be stable and opaque,
notification identifiers need not be either stable or opaque,
because the reasoning that leads to those requirements for rule ids does not apply to tool notifications.
A tool notification with level `"error"` should always be treated as a failure,
and tools should not allow them to be disabled.
And tool authors are free to change the notification ids at any time, so there is no reason
for them to be opaque; to the contrary, they are more useful if they convey information to the user.
~

### `ruleId` property { #notification-ruleId }

If the condition described by the `notification` object is relevant to a particular analysis rule,
the `notification` object should contain a property named `ruleId` whose value is a string containing the stable,
unique identifier of the rule (&sect;[#rule-id]).

### `ruleKey` property { #notification-ruleKey }

If there is more than one rule with the id specified by the `ruleId` property (&sect;[#notification-ruleId]),
and if the `run` object in which this notification occurs contains a `rules` property (&sect;[#run-rules]),
then the `notification` object shall contain a property named `ruleKey` whose value is a string that matches
one of the property names in the `run.rules` object.

The value of the `ruleId` property on this `notification` object must match the
`id` property (&sect;[#rule-id]) of the `rule` object identified by `ruleKey`.

~ IsoExample
In this example, there is more than one rule with id `CA1711`. When the log includes a
notification with that rule id, it provides a value for `ruleKey` to specify which of the rules with that `id` is meant.

```
`runs`: [
  {
    "configurationNotifications": [
      {
        "id": "CFG0001",
        "message": "Rule configuration is missing."
        "ruleId": "CA1711",   # Matches the "id" value of the specified property value within "rules"
        "ruleKey": "CA1711-1" # Specifies a property name within "rules".
      }
    ],
    "rules": {
      "CA1711-1": {
        "id": "CA1711"
      },
      "CA1711-2": {
        "id": "CA1711"
      }
    }
  }
]
```
~

### `physicalLocation` property { #notification-physicalLocation }

If the condition described by the `notification` object is relevant to a particular file location,
the `notification` object should contain a property named `physicalLocation` whose value is a `physicalLocation` object
(&sect;[#physicalLocation]) that identifies the relevant location.

### `message` property { #notification-message }

A `notification` object shall contain a property named `message` whose value is a string that describes the condition that was encountered.

### `level` property { #notification-level }

A `notification` object may contain a property named `level` whose value is one of a fixed set of strings
that specify the severity level of the notification.

If present, the `level` property shall have one of the following values, with the specified meanings:

* `"error"`: A serious problem was found.
The condition encountered by the tool resulted in the analysis being halted,
or caused the results to be incorrect or incomplete. 

* `"warning"`: A problem that is not considered to be serious was found.
The condition encountered by the tool is such that it is uncertain whether a problem occurred,
or is such that the analysis might be incomplete but the results that were generated are probably valid.

* `"note"`: The notification is purely informational. There is no required action.

If the `level` property is absent, it shall be considered equivalent to the value `"warning"`.

### `threadId` property { #notification-threadId }

A `notification` object may contain a property named `threadId` whose value is an integer which
identifies the thread associated with this notification.

### `time` property { #notification-time }

A `notification` object may contain a property named `time` whose value is a string
specifying the date and time at which the analysis tool generated the notification.
The string shall be in the format specified by (&sect;[#fileFormat-dateTime]).

### `exception` property { #notification-exception }

If the notification is a result of a runtime exception, the `notification` object may contain a property named `exception`
whose value is an `exception` object (&sect;[#exception]).

If the notification is not the result of a runtime exception, the `exception` property shall be absent.

### `properties` property { #notification-properties }

A `notification` object may contain a property named `properties` whose value is a property bag (&sect;[#property-bags]).
This allows tools to include information about the encountered condition that is not explicitly specified in the SARIF format.

## `exception` object { #exception }

### General { #exception-General }

An `exception` object describes a runtime exception encountered in the course of executing an analysis tool.
This includes signals in POSIX-conforming operating systems.

### `kind` property { #exception-kind }

An `exception` object should contain a property named `kind` whose value is a string describing
the exception.

If the `exception` represents a thrown object, `kind` shall be the fully qualified type name of the
object that was thrown, if that information is available.

~ IsoNumberedExample { @IsoNumberedExample=1 }
C#: `"System.ArgumentNullException"`
~

If the `exception` represents a POSIX signal, `kind` shall be the symbolic name
of the signal as specified in `<signal.h>`.

~ IsoNumberedExample
POSIX: `"SIGFPE"`
~

If the tool does not have access to information about the object that was thrown, the `kind` property shall be absent.

### `message` property { #exception-message }

An `exception` object should contain a property named `message` whose value is a string that describes the exception.

If the tool does not have access to an appropriate property of the thrown object, the `message` property shall be absent.

~ IsoNumberedExample
C++: The tool would populate `message` from the string returned from the `what()` method of any object derived from `std::exception`.
~

~ IsoNumberedExample
C#: The tool would populate `message` from the value of the `Message` property of any object derived from `System.Exception`.
~

### `stack` property { #exception-stack }

An `exception` object may contain a property named `stack` whose value is a `stack` object (&sect;[#stack])
that describes the sequence of function calls leading to the exception.

### `innerExceptions` property { #exception-innerExceptions }

An `exception` object may contain a property named `innerExceptions` whose value is an array of one or more `exception` objects,
each of which is considered to be a cause of the containing `exception`.

~ IsoNote
There is commonly no more than one inner exception.
This property is an array to accommodate platforms that provide a mechanism for aggregating exceptions,
such as the `System.AggregateException` class from the .NET Framework.
~
