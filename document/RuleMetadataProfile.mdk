# Rule Metadata Profile { #rule-metadata-profile }

## General

It is sometimes useful for a result management system to provide information to the end user
about the rules that were evaluated in the course of producing the results in a log file.
For example, the user might want to know whether the result indicates a potential security risk,
or where to find additional documentation for the result.
We refer to this information as rule metadata.

It is possible for a result management system to have built-in knowledge of
the metadata for the rules defined by a set of well-known static analysis tools.
It is also possible for the system to provide a means for end users to upload
metadata for rules defined by specialized tools used in their organizations.
But some tools enable end users to define their own rules by means of a plug-in
mechanism.
In this case, it is useful if the metadata for these rules can be included
in the log file itself.

The Rule Metadata Profile defines additional optional elements of the SARIF format
that are intended for use in this scenario.

## `runLog` object { #rule-metadata-profile-runLog }

### General { #rule-metadata-profile-runLog-general }

The Rule Metadata Profile defines one additional property in the `runLog` object (&sect;[#runLog]).

### `ruleInfo` property { #ruleInfo }

A `runLog` object (&sect;[#runLog]) may contain a property named `ruleInfo`
whose value is an array of `ruleDescriptor` (&sect;[#ruleDescriptor]) objects.

If the `ruleInfo` property is present, then for each distinct `ruleId` (&sect;[#result-ruleId])
mentioned by any `result` object (&sect;[#result]) in this `runLog`,
`ruleInfo` must contain exactly one `ruleDescriptor` object
whose `id` property (&sect;[#ruleDescriptor-id]) matches that `ruleId`.

The `ruleInfo` property may contain additional `ruleDescriptor` objects whose
`id` properties are not mentioned by any `result` object in this `runLog`.

## `ruleDescriptor` object { #ruleDescriptor }

### General { #ruleDescriptor-General }

A `ruleDescriptor` object contains information that describes a rule.

### Constraints

Either the `shortDescription` property (&sect;[#ruleDescriptor-shortDescription])
or the `fullDescription` property (&sect;[#ruleDescriptor-fullDescription])
or both must be present.

### `id` property { #ruleDescriptor-id }

A `ruleDescriptor` object shall contain a property named `id` whose value is a string containing
a stable, opaque identifier for the rule.

~ IsoExample
`"CA2101"`
~

### `name` property { #ruleDescriptor-name }

A `ruleDescriptor` object may contain a property named `name` whose value is a string containing
a rule identifier that is understandable to an end user.
If `name` contains implementation details that change over time,
a tool author might alter a rule's `name` (while leaving
the stable `id` property unchanged).

~IsoNote
A rule `name` is suitable in contexts where a readable identifier is preferable and where the
lack of stability is not a concern.
~

~ IsoExample
`"SpecifyMarshalingForPInvokeStringArguments"`
~

### `shortDescription` property { #ruleDescriptor-shortDescription }

A `ruleDescriptor` object may contain a property named `shortDescription` whose value is a string containing
a concise description of the rule. The `shortDescription` property should be a single sentence that is understandable
when displayed in user interface contexts where the available space is limited to a single line of text.

~ IsoExample
`"Specify marshaling for P/Invoke string arguments"`
~

### `fullDescription` property { #ruleDescriptor-fullDescription}

An `ruleDescriptor` object should contain a property named `fullDescription` whose value is a string that describes the rule.

The `fullDescription` property should, as far as possible, provide details sufficient to enable resolution of any problem indicated by the result. 

The first sentence of the `fullDescription` property should provide a concise description of the rule,
suitable for display in cases where available space is limited.
Tools that construct `fullDescription` in this way need not provide a value for the `shortDescription` property.
Tools that do not construct `fullDescription` in this way should provide a value for the `shortDescription` property,
because otherwise, the initial portion of `fullDescription` that a viewer displays where available space is limited
might not be understandable.

### `options` property { #ruleDescriptor-options }

A `ruleDescriptor` object may contain a property named `options`, whose value is a JSON object
consisting of a set of name/value pairs with arbitrary names.
The `options` objects shall describe the set of configurable options supported by the rule.

The value within each name/value pair shall be a string, which may be the empty string.
The value shall not be a JSON array or sub-object.

### `formatSpecifiers` property { #ruleDescriptor-formatSpecifiers }

A `ruleDescriptor` object may contain a property named `formatSpecifiers`, whose value is a JSON object
consisting of a set of name/value pairs with arbitrary names.

The value within each name/value pair shall be a string that can be passed to a
string formatting function (_e.g._, the C language `printf` function) to construct a formatted message in combination with
an arbitrary number of additional function arguments.

The set of names appearing in the `formatSpecifiers` property shall contain at least the set of strings
which occur as values of the `result.formattedMessage.specifierId` property in the result log.
The `formatSpecifiers` property may contain additional name/value pairs whose names do not appear
as the value of the `result.formattedMessage.specifierId` property for any result in the result log.

~IsoNote
Additional name/value pairs are permitted in the `formatSpecifiers` property
for the convenience of tool vendors, who might find it easier to emit the entire set of messages
supported by a rule, rather than restricting it to those messages that happen to appear in the
result log.
~

~ IsoExample

````
{
    "objectCreation" : "{0} creates a new instance of {1} which is never used.
	                    Pass the instance as an argument to another method, assign the instance to a variable,
						or remove the object creation if it is unnecessary.",  
    "stringReturnValue" : "{0} calls {1} but does not use the new string instance that the method returns.
	                       Pass the instance as an argument to another method, assign the instance to a variable,
						  or remove the call if it is unnecessary."        
}
````
~

### `helpUri` property { #ruleDescriptor-helpUri }

A `ruleDescriptor` object may contain a property named `helpUri`, whose value is a string
containing the URI where the primary documentation for the rule can be found.

~ IsoNote
The documentation might include examples, contact information for the rule authors,
and links to additional information about the rule.
~

### `properties` property { #ruleDescriptor-properties }

A `ruleDescriptor` object may contain a property named `properties`, whose value is a JSON object
consisting of a set of name/value pairs with arbitrary names.
This allows tools to include information about the rule that is not explicitly specified in the SARIF format.

The value within each name/value pair shall be a string, which may be the empty string.
The value shall not be a JSON array or sub-object.

## `result` object { #rule-metadata-profile-result }

### General { #rule-metadata-profile-result-general }

The Rule Metadata Profile defines one additional property in the `result` object (&sect;[#result]).

### `formattedMessage` property { #result-formattedMessage }

An `result` object (&sect;[#result]) may contain a `formattedMessage` property whose value is
a `formattedMessage` object (&sect;[#formattedMessage]) that can be used to construct
a fully formatted message that describes the result.

If the `formattedMessage` property is present on an `result`, the `fullMessage` property (&sect;[#result-fullMessage])
shall not be present.
If the `fullMessage` property is present on an `result`, the `formattedMessage` property
shall not be present.

## `formattedMessage` object { #formattedMessage }

### General { #formattedMessage-General }

A `formattedMessage` object contains information that can be used to construct a fully formatted message that describes an issue.

### `specifierId` property { #formattedMessage-id }
A `formattedMessage` object must contain a property named `specifierId`, whose value is a string that identifies the format string
used to format the message that describes this result.
The value of `specifierId` must correspond to one of the names in the set of name/value pairs contained in the `formatSpecifiers` property (&sect;[#ruleDescriptor-formatSpecifiers])
of the `ruleInfo` object (&sect;[#ruleDescriptor]) whose `id` property (&sect;[#ruleDescriptor-id]) matches the `ruleId` property (&sect;[#result-ruleId]) of this issue.

### `arguments` property { #formattedMessage-arguments }
A `formattedMessage` object may contain a property named `arguments`,
whose value is an array of string values that will be used, in combination with a format specifier,
to construct a result message.
